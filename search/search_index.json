{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Dialogflow CX CLI","text":"<p><code>cxcli</code> is a command-line tool that helps Dialogflow CX users test their agents and interact with them in various ways. It is useful for your day-to-day tasks or if you want to integrate it with your favorite CI tool.</p> <p>This CLI also allows you to interact with the text-to-speech and speech-to text APIs in Google Cloud.</p>"},{"location":"#get-started","title":"Get started","text":"<ul> <li>How to install the tool</li> <li>Authentication</li> <li>Read the FAQ</li> </ul>"},{"location":"#got-questions-comments-or-suggestions","title":"Got questions, comments or suggestions?","text":"<p><code>cxcli</code> is developed by xavidop.</p> <p>You can contact us via email at: dialogflowcxcli@gmail.com.</p> <p>Follow @dialogflowcxcli on Twitter for updates and announcements.</p> <p>Visit our links section for more information about staying connected with us.</p>"},{"location":"ci/","title":"CI","text":"<p>TBD</p>"},{"location":"dialog/","title":"Interactive Dialog","text":"<p>The <code>cxcli</code> tool has command that allows you to interactively play with your agent from your terminal!</p>"},{"location":"dialog/#usage","title":"Usage","text":"<p>You can find the dialog functionality within the <code>cxcli dialog</code> subcommand. You can read the documentation about this command here.</p>"},{"location":"dialog/#parameters","title":"Parameters","text":"<p>These are the relevant parameters that you can use to interact with your agent interactively from your terminal:</p> <ol> <li><code>locale</code>: this parameter accepts all of the locales that are available in Dialogflow CX.</li> </ol>"},{"location":"dialog/#example","title":"Example","text":"<p>Here is a simple example of the <code>cxcli dialog</code> command:</p> <pre><code>cxcli dialog --agent-name test-agent --project-id test-cx-346408 --location-id us-central1\n</code></pre> <p>The above command will give you output similar to the following:</p> <pre><code>$ cxcli dialog --agent-name test-agent --project-id test-cx-346408 --location-id us-central1\nINFO Please press Ctrl+C whenever you want to stop the interaction. \nUser&gt; hi\nAgent&gt; Hi, this is Information Finder. Which product information do you need?\nUser&gt; sorry, can you repeat\nAgent&gt; I didn't get that.\nAgent&gt; Hi, I am a chatbot that can help you find information about CorpX products: Intelligent Customer Insight, Order Fulfillment, Order Handling, Order Management Suite, Sales Engine, or Supercharge.\nAgent&gt; Do you want to continue looking up information for one of these products? Say yes or no.\nUser&gt; no\nAgent&gt; Goodbye\n</code></pre> <p>Important</p> <p>Once the session is finished, you will get the terminal prompt again.</p>"},{"location":"links/","title":"Links","text":"<ul> <li>Follow our progress on the GitHub repository</li> <li>Follow us on Twitter and Mastodon for updates</li> <li>Join our Discord server</li> <li>Read my blog</li> <li>Sign up for my newsletter</li> <li>For questions, support and general discussion, please use Discord or GitHub Discussions</li> <li>Contributing Guidelines</li> <li>Security Policy</li> </ul> <p>This project adheres to the Contributor Covenant code of conduct. By participating, you are expected to uphold this code.</p>"},{"location":"security/","title":"Security Policy","text":""},{"location":"security/#supported-versions","title":"Supported Versions","text":"<p>Only the last stable version at any given point.</p>"},{"location":"security/#reporting-a-vulnerability","title":"Reporting a Vulnerability","text":"<p>Vulnerabilities can be disclosed via email to dialogflowcxcli@gmail.com</p>"},{"location":"stt/","title":"Speech-to-text","text":"<p>The <code>cxcli</code> tool has various commands that allow you to interact with Google Cloud's Speech to Text service using the <code>Cloud Speech-to-text API</code>!</p> <p>Is this your first time using this feature?</p> <p>Before you start using this functionality, please, read the authentication page.</p>"},{"location":"stt/#usage","title":"Usage","text":"<p>You can find the speech-to-text functionality within the <code>cxcli stt</code> subcommand. You can read the documentation about this command here.</p> <p>The <code>cxcli stt</code> command has a <code>recognize</code> subcommand. You can find the usage of this command here.</p>"},{"location":"stt/#parameters","title":"Parameters","text":"<p>These are the relevant parameters that you can use to interact with Google Cloud STT:</p> <ol> <li><code>locale</code>: this parameter accepts all of the locales that are available in the Google Cloud <code>Speech-to-text API</code>. You can find all the locales available here.</li> </ol>"},{"location":"stt/#audio-input-file","title":"Audio input file","text":"<p>It is important to know that the input audio needs to be in the following format:</p> <ol> <li>A sample rate of 16000 Hertz</li> <li>The audio encoding has to be Linear16. Linear16 is a 16-bit linear pulse-code modulation (PCM) encoding.</li> </ol> <p>If you don't have a file with this format, you can create it by yourself using the <code>cxcli tts</code> command! All of the relevant information is located here.</p>"},{"location":"stt/#example","title":"Example","text":"<p>Here is a simple example of the <code>cxcli stt recognize</code> command:</p> <pre><code>cxcli stt recognize hi.mp3  --locale en-US\n</code></pre> <p>The above command will give you output similar to the following:</p> <pre><code>$ cxcli stt recognize hi.mp3 --locale en-US --verbose\nINFO Duration time: 570 miliseconds\nINFO Detections: 1\nINFO 1. Text detected: hi\nINFO 1. Confidence: 79.276474%\n</code></pre> <p>Are you running this command in a CI/CD pipeline?</p> <p>If this is the case, we recommend that you set the <code>--output-format</code> parameter to <code>json</code>.</p>"},{"location":"troubleshooting/","title":"Troubleshooting","text":""},{"location":"troubleshooting/#getting-support","title":"Getting support","text":"<p>All users have access to a public Discord server for support and collaboration. Refer to the links page for more information.</p>"},{"location":"troubleshooting/#project-not-found","title":"Project not found","text":"<p>Make sure that you have configured either the <code>gcloud</code> CLI or the authentication <code>json</code> file properly. You can find more information on the Authentication page.</p>"},{"location":"troubleshooting/#you-need-to-enable-the-dialogflow-api","title":"You need to enable the Dialogflow API","text":"<p>You need to enable the <code>Dialogflow API</code> in your Google Cloud project if you want to interact with <code>cxcli</code>. Make sure you have the permissions needed for the tool. You can find more information on the Authentication page.</p>"},{"location":"troubleshooting/#you-need-to-enable-the-cloud-speech-to-text-api","title":"You need to enable the Cloud Speech-to-text API","text":"<p>You need to enable the <code>Cloud Speech-to-text API</code> in your Google Cloud project if you want to run the <code>cxcli stt</code> commands. You can find more information on the Authentication page.</p>"},{"location":"troubleshooting/#you-need-to-enable-the-cloud-text-to-speech-api","title":"You need to enable the Cloud Text-to-speech API","text":"<p>You need to enable the <code>Cloud Text-to-speech API</code> in your Google Cloud project if you want to run the <code>cxcli tts</code> commands. You can find more information on the Authentication page.</p>"},{"location":"tts/","title":"Text-to-speech","text":"<p>The <code>cxcli</code> tool has various commands that allow you to interact with Google Cloud's Text to Speech service using the <code>Cloud Text-to-Speech API</code>!</p> <p>Is this your first time using this feature?</p> <p>Before you start using this functionality, please, read the authentication page.</p>"},{"location":"tts/#usage","title":"Usage","text":"<p>You can find the text-to-speech functionality within the <code>cxcli tts</code> subcommand. You can read the documentation about this command here.</p> <p>The <code>cxcli tts</code> command has a <code>synthesize</code> subcommand. You can find the usage of this command here.</p>"},{"location":"tts/#parameters","title":"Parameters","text":"<p>These are the relevant parameters that you can use to interact with Google Cloud TTS:</p> <ol> <li><code>locale</code>: this parameter accepts all of the locales that are available in the Google Cloud <code>Text-to-speech API</code>. You can find all the locales available here.</li> <li><code>output-file</code>: MP3 audio file where we are going to output the synthesized text.</li> </ol>"},{"location":"tts/#output","title":"Output","text":"<p>It is important to know that the output audio will have the following format:</p> <ol> <li>A sample rate of 16000 Hertz</li> <li>The audio encoding will be Linear16. Linear16 is a 16-bit linear pulse-code modulation (PCM) encoding.</li> </ol>"},{"location":"tts/#example","title":"Example","text":"<p>Here is a simple example of the <code>cxcli tts synthesize</code> command:</p> <pre><code>cxcli tts synthesize hi --locale en-US --output-file hi.mp3\n</code></pre> <p>The above command will give you an audio file similar to the following:</p> <p>  Your browser does not support the audio element. </p> <p>You can download the audio file here.</p>"},{"location":"agents/create/","title":"Create","text":""},{"location":"agents/create/#usage","title":"Usage","text":"<p>You can find the create functionality within the <code>cxcli agent create</code> subcommand. You can read the documentation about this command here.</p> <p>The argument to <code>--timezone</code> is a value from the IANA time zone database. This is an example: <pre><code>America/New_York\nEurope/Madrid\n</code></pre></p>"},{"location":"agents/create/#example","title":"Example","text":"<p>Here is a simple example of the <code>cxcli agent create</code> command:</p> <pre><code>cxcli agent create test-agent --project-id test-cx-346408 --location-id us-central1 --locale en --timezone Europe/Madrid\n</code></pre> <p>The above command will give you output similar to the following:</p> <pre><code>$ cxcli agent create test-agent --project-id test-cx-346408 --location-id us-central1 --locale en --timezone Europe/Madrid\nINFO Agent created with id: projects/test-cx-346408/locations/us-central1/agents/e2ae2503-f38c-46a1-a3bf-22e57617baf0\n</code></pre>"},{"location":"agents/create/#useful-links","title":"Useful Links","text":"<p>If you want to learn more about Dialogflow CX Agent creation, refer to the official documentation.</p>"},{"location":"agents/delete/","title":"Delete","text":""},{"location":"agents/delete/#usage","title":"Usage","text":"<p>You can find the delete functionality within the <code>cxcli agent delete</code> subcommand. You can read the documentation about this command here.</p>"},{"location":"agents/delete/#example","title":"Example","text":"<p>Here is a simple example of the <code>cxcli agent delete</code> command:</p> <pre><code>cxcli agent delete test-agent --project-id test-cx-346408 --location-id us-central1\n</code></pre> <p>The above command will give you output similar to the following:</p> <pre><code>$ cxcli agent delete test-agent --project-id test-cx-346408 --location-id us-central1\nINFO Agent deleted\n</code></pre>"},{"location":"agents/delete/#useful-links","title":"Useful Links","text":"<p>If you want to learn more about Dialogflow CX Agent deletion, refer to the official documentation.</p>"},{"location":"agents/export/","title":"Export","text":""},{"location":"agents/export/#usage","title":"Usage","text":"<p>You can find the export functionality within the <code>cxcli agent export</code> subcommand. You can read the documentation about this command here.</p> <p>Exported file format</p> <p>You can export your agent in <code>blob</code> or <code>json</code> format. When you choose <code>json</code> format, the output file is going to be a <code>zip</code> file.</p>"},{"location":"agents/export/#example","title":"Example","text":"<p>Here is a simple example of the <code>cxcli agent export</code> command:</p> <pre><code>cxcli agent export test-agent --project-id test-cx-346408 --location-id us-central1 --export-format blob\n</code></pre> <p>The above command will give you output similar to the following:</p> <pre><code>$ cxcli agent export test-agent --project-id test-cx-346408 --location-id us-central1 --export-format json --output-file agent.zip\nINFO Agent exported to file: agent.zip\n</code></pre> <p>are you running this command in a CI/CD pipeline?</p> <p>If this is the case, we recommend that you set the <code>--output-format</code> parameter to <code>json</code>.</p>"},{"location":"agents/export/#useful-links","title":"Useful Links","text":"<p>If you want to learn more about Dialogflow CX exports, refer to the official documentation.</p>"},{"location":"agents/introduction/","title":"Agents","text":""},{"location":"agents/introduction/#what-is-this","title":"What is this?","text":"<p>An agent in Dialogflow CX is the entity that handles all the conversations that we have defined on the Dialogflow CX console with the end users.</p> <p>An agent is basically an assistant that will manage the state of each user's conversation when the end users are interacting with the agent through text or audio in multiple channels.</p> <p>With <code>cxcli</code>, you can easily interact with your Dialogflow CX agents.</p> <p>All of the commands that are available in <code>cxcli</code> to interact with your agents are located within the <code>cxcli agent</code> subcommand.</p>"},{"location":"agents/introduction/#create","title":"Create","text":"<p>You can create an agent using this tool.</p> <p>The <code>cxcli</code> has a command that allows you to create an agent. You can find a more detailed explanation here</p>"},{"location":"agents/introduction/#update","title":"Update","text":"<p>You can update an agent using this cli.</p> <p>The <code>cxcli</code> has a command that allows you to update an agent. You can find a more detailed explanation here</p>"},{"location":"agents/introduction/#delete","title":"Delete","text":"<p>The <code>cxcli</code> has a command that allows you to delete your agent. You can find a more detailed explanation here</p>"},{"location":"agents/introduction/#restore","title":"Restore","text":"<p>You can restore an agent using a <code>blob</code> or a <code>json-package</code> file. Right now the Dialogflow CX API, used by the <code>cxcli</code>, works with the <code>blob</code> and <code>json</code> format.</p> <p>The <code>cxcli</code> has a command that allows you to restore an agent. You can find a more detailed explanation here</p>"},{"location":"agents/introduction/#export","title":"Export","text":"<p>An agent can be exported as a <code>blob</code> or a <code>json-package</code> file. Right now the Dialogflow CX API, used by the <code>cxcli</code>, works with the <code>blob</code> and <code>json</code> format.</p> <p>The <code>cxcli</code> has a command that allows you to export your agent. You can find a more detailed explanation here</p>"},{"location":"agents/introduction/#useful-links","title":"Useful Links","text":"<p>If you want to see the full usage of the <code>cxcli agent</code> command, please refer to this page.</p> <p>If you want to learn more about Dialogflow CX agents, refer to the official documentation.</p>"},{"location":"agents/restore/","title":"Restore","text":""},{"location":"agents/restore/#usage","title":"Usage","text":"<p>You can find the restore functionality within the <code>cxcli agent restore</code> subcommand. You can read the documentation about this command here.</p> <p>File format to be restored</p> <p>Now you can restore your agents in <code>blob</code> or <code>json</code> format. When you choose <code>json</code> format, the input file has to be a <code>zip</code> file with a proper Dialogflow CX structure.</p>"},{"location":"agents/restore/#example","title":"Example","text":"<p>Here is a simple example of the <code>cxcli agent restore</code> command:</p> <pre><code>cxcli agent restore test-agent --project-id test-cx-346408 --location-id us-central1 --input agent.blob\n</code></pre> <p>The above command will give you output similar to the following:</p> <pre><code>$ cxcli agent restore test-agent --project-id test-cx-346408 --location-id us-central1 --input agent.zip\nINFO Agent restored\n</code></pre> <p>Are you running this command in a CI/CD pipeline?</p> <p>If this is the case, we recommend that you set the <code>--output-format</code> parameter to <code>json</code>.</p>"},{"location":"agents/restore/#useful-links","title":"Useful Links","text":"<p>If you want to learn more about Dialogflow CX restores, refer to the official documentation.</p>"},{"location":"agents/update/","title":"Update","text":""},{"location":"agents/update/#usage","title":"Usage","text":"<p>You can find the update functionality within the <code>cxcli agent update</code> subcommand. You can read the documentation about this command here.</p> <p>The argument to <code>--timezone</code> is a value from the IANA time zone database. This is an example: <pre><code>America/New_York\nEurope/Madrid\n</code></pre></p>"},{"location":"agents/update/#example","title":"Example","text":"<p>Here is a simple example of the <code>cxcli agent update</code> command:</p> <pre><code>cxcli agent update test-agent --project-id test-cx-346408 --location-id us-central1 --locale en --timezone Europe/Madrid\n</code></pre> <p>The above command will give you output similar to the following:</p> <pre><code>$ cxcli agent update test-agent --project-id test-cx-346408 --location-id us-central1 --locale en --timezone Europe/Madrid\nINFO Agent updated\n</code></pre>"},{"location":"agents/update/#useful-links","title":"Useful Links","text":"<p>If you want to learn more about Dialogflow CX Agent update, refer to the official documentation.</p>"},{"location":"cmd/cxcli/","title":"cxcli","text":"<p>Dialogflow CX CLI</p>"},{"location":"cmd/cxcli/#synopsis","title":"Synopsis","text":"<p>Welcome to cxcli!</p> <p>This utility provides you with an easy way to interact with your Dialogflow CX agents.</p> <p>You can find the documentation at https://github.com/xavidop/dialogflow-cx-cli.</p> <p>Please file all bug reports on GitHub at https://github.com/xavidop/dialogflow-cx-cli/issues.</p> <pre><code>cxcli [flags]\n</code></pre>"},{"location":"cmd/cxcli/#options","title":"Options","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file path (optional)\n  -h, --help                   help for cxcli\n  -o, --output-format string   Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command (optional)\n  -v, --verbose                verbose error output (with stack trace) (optional)\n</code></pre>"},{"location":"cmd/cxcli/#see-also","title":"See also","text":"<ul> <li>cxcli agent   - Actions on agent commands</li> <li>cxcli completion     - Generate the autocompletion script for the specified shell</li> <li>cxcli dialog     - Test your CX Agent interactively directly from your terminal</li> <li>cxcli entity-type   - Actions on entity type commands</li> <li>cxcli environment   - Actions on environment</li> <li>cxcli flow     - Actions on flow commands</li> <li>cxcli flow-version     - Actions on flow versions commands</li> <li>cxcli generator   - Actions on generator commands</li> <li>cxcli intent     - Actions on intent commands</li> <li>cxcli jsonschema     - outputs cxcli's JSON schema</li> <li>cxcli profile-conversation     - Actions on conversation testing</li> <li>cxcli profile-nlu   - Actions on NLU testing</li> <li>cxcli stt   - Actions on speech-to-text commands</li> <li>cxcli tts   - Actions on text-to-speech commands</li> <li>cxcli version   - Get cxcli version</li> <li>cxcli webhook   - Actions on webhook commands</li> </ul>"},{"location":"cmd/cxcli_agent/","title":"cxcli agent","text":"<p>Actions on agent commands</p> <pre><code>cxcli agent [flags]\n</code></pre>"},{"location":"cmd/cxcli_agent/#options","title":"Options","text":"<pre><code>  -h, --help   help for agent\n</code></pre>"},{"location":"cmd/cxcli_agent/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file path (optional)\n  -o, --output-format string   Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command (optional)\n  -v, --verbose                verbose error output (with stack trace) (optional)\n</code></pre>"},{"location":"cmd/cxcli_agent/#see-also","title":"See also","text":"<ul> <li>cxcli   - Dialogflow CX CLI</li> <li>cxcli agent create     - Creates an agent</li> <li>cxcli agent delete     - Deletes a specific agent</li> <li>cxcli agent export     - Executes an export for a specific agent</li> <li>cxcli agent restore   - Executes a restore action for a specific agent</li> <li>cxcli agent update     - Update an agent</li> </ul>"},{"location":"cmd/cxcli_agent_create/","title":"cxcli agent create","text":"<p>Creates an agent</p> <pre><code>cxcli agent create [agent-name] [flags]\n</code></pre>"},{"location":"cmd/cxcli_agent_create/#options","title":"Options","text":"<pre><code>  -r, --avatar-uri string                   Avatar URI of the agent (optional)\n  -d, --description string                  Description of the agent (optional)\n  -b, --enable-interaction-logging string   Enable interaction logging for this agent. Possible values: true or false (optional)\n  -s, --enable-speech-adaptation string     Enable speech adaptation for this agent. Possible values: true or false (optional)\n  -n, --enable-spell-correction string      Enable spell correction for this agent. Possible values: true or false (optional)\n  -a, --enable-stackdriver-logging string   Enable Google Stackdriver logging for this agent. Possible values: true or false (optional)\n  -h, --help                                help for create\n  -e, --locale string                       Default locale of the agent (required)\n  -l, --location-id string                  Dialogflow CX Location ID of the Project (required)\n  -p, --project-id string                   Dialogflow CX Project ID (required)\n  -x, --supported-locales strings           Supported locales of the agent, comma separated. Example: fr,es,de (optional)\n  -t, --timezone string                     Timezone of the agent from the time zone database https://www.iana.org/time-zones. Example: America/New_York, Europe/Madrid (required)\n</code></pre>"},{"location":"cmd/cxcli_agent_create/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file path (optional)\n  -o, --output-format string   Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command (optional)\n  -v, --verbose                verbose error output (with stack trace) (optional)\n</code></pre>"},{"location":"cmd/cxcli_agent_create/#see-also","title":"See also","text":"<ul> <li>cxcli agent   - Actions on agent commands</li> </ul>"},{"location":"cmd/cxcli_agent_delete/","title":"cxcli agent delete","text":"<p>Deletes a specific agent</p> <pre><code>cxcli agent delete [agent-name] [flags]\n</code></pre>"},{"location":"cmd/cxcli_agent_delete/#options","title":"Options","text":"<pre><code>  -h, --help                 help for delete\n  -l, --location-id string   Dialogflow CX Location ID of the Project (required)\n  -p, --project-id string    Dialogflow CX Project ID (required)\n</code></pre>"},{"location":"cmd/cxcli_agent_delete/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file path (optional)\n  -o, --output-format string   Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command (optional)\n  -v, --verbose                verbose error output (with stack trace) (optional)\n</code></pre>"},{"location":"cmd/cxcli_agent_delete/#see-also","title":"See also","text":"<ul> <li>cxcli agent   - Actions on agent commands</li> </ul>"},{"location":"cmd/cxcli_agent_export/","title":"cxcli agent export","text":"<p>Executes an export for a specific agent</p> <pre><code>cxcli agent export [agent-name] [flags]\n</code></pre>"},{"location":"cmd/cxcli_agent_export/#options","title":"Options","text":"<pre><code>  -t, --export-format string   Export format type: json or blob. blob by default. Default: blob (optional) (default \"blob\")\n  -h, --help                   help for export\n  -l, --location-id string     Dialogflow CX Location ID of the Project (required)\n  -f, --output-file string     Output file name. Default: agent.blob (optional) (default \"agent.blob\")\n  -p, --project-id string      Dialogflow CX Project ID (required)\n</code></pre>"},{"location":"cmd/cxcli_agent_export/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file path (optional)\n  -o, --output-format string   Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command (optional)\n  -v, --verbose                verbose error output (with stack trace) (optional)\n</code></pre>"},{"location":"cmd/cxcli_agent_export/#see-also","title":"See also","text":"<ul> <li>cxcli agent   - Actions on agent commands</li> </ul>"},{"location":"cmd/cxcli_agent_restore/","title":"cxcli agent restore","text":"<p>Executes a restore action for a specific agent</p> <pre><code>cxcli agent restore [agent-name] [flags]\n</code></pre>"},{"location":"cmd/cxcli_agent_restore/#options","title":"Options","text":"<pre><code>  -h, --help                 help for restore\n  -i, --input string         Input file name. Default: agent.blob (optional) (default \"agent.blob\")\n  -l, --location-id string   Dialogflow CX Location ID of the Project (required)\n  -p, --project-id string    Dialogflow CX Project ID (required)\n</code></pre>"},{"location":"cmd/cxcli_agent_restore/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file path (optional)\n  -o, --output-format string   Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command (optional)\n  -v, --verbose                verbose error output (with stack trace) (optional)\n</code></pre>"},{"location":"cmd/cxcli_agent_restore/#see-also","title":"See also","text":"<ul> <li>cxcli agent   - Actions on agent commands</li> </ul>"},{"location":"cmd/cxcli_agent_update/","title":"cxcli agent update","text":"<p>Update an agent</p> <pre><code>cxcli agent update [agent-name] [flags]\n</code></pre>"},{"location":"cmd/cxcli_agent_update/#options","title":"Options","text":"<pre><code>  -r, --avatar-uri string                   Avatar URI of the agent (optional)\n  -d, --description string                  Description of the agent (optional)\n  -b, --enable-interaction-logging string   Enable interaction logging for this agent. Possible values: true or false (optional)\n  -s, --enable-speech-adaptation string     Enable speech adaptation for this agent. Possible values: true or false (optional)\n  -n, --enable-spell-correction string      Enable spell correction for this agent. Possible values: true or false (optional)\n  -a, --enable-stackdriver-logging string   Enable Google Stackdriver logging for this agent. Possible values: true or false (optional)\n  -h, --help                                help for update\n  -l, --location-id string                  Dialogflow CX Location ID of the Project (required)\n  -p, --project-id string                   Dialogflow CX Project ID (required)\n  -x, --supported-locales strings           Supported locales of the agent, comma separated. Example: fr,es,de (optional)\n  -t, --timezone string                     Timezone of the agent from the time zone database https://www.iana.org/time-zones. Example: America/New_York, Europe/Madrid (optional)\n</code></pre>"},{"location":"cmd/cxcli_agent_update/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file path (optional)\n  -o, --output-format string   Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command (optional)\n  -v, --verbose                verbose error output (with stack trace) (optional)\n</code></pre>"},{"location":"cmd/cxcli_agent_update/#see-also","title":"See also","text":"<ul> <li>cxcli agent   - Actions on agent commands</li> </ul>"},{"location":"cmd/cxcli_completion/","title":"cxcli completion","text":"<p>Generate the autocompletion script for the specified shell</p>"},{"location":"cmd/cxcli_completion/#synopsis","title":"Synopsis","text":"<p>Generate the autocompletion script for cxcli for the specified shell. See each sub-command's help for details on how to use the generated script.</p>"},{"location":"cmd/cxcli_completion/#options","title":"Options","text":"<pre><code>  -h, --help   help for completion\n</code></pre>"},{"location":"cmd/cxcli_completion/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file path (optional)\n  -o, --output-format string   Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command (optional)\n  -v, --verbose                verbose error output (with stack trace) (optional)\n</code></pre>"},{"location":"cmd/cxcli_completion/#see-also","title":"See also","text":"<ul> <li>cxcli   - Dialogflow CX CLI</li> <li>cxcli completion bash   - Generate the autocompletion script for bash</li> <li>cxcli completion fish   - Generate the autocompletion script for fish</li> <li>cxcli completion powershell   - Generate the autocompletion script for powershell</li> <li>cxcli completion zsh     - Generate the autocompletion script for zsh</li> </ul>"},{"location":"cmd/cxcli_completion_bash/","title":"cxcli completion bash","text":"<p>Generate the autocompletion script for bash</p>"},{"location":"cmd/cxcli_completion_bash/#synopsis","title":"Synopsis","text":"<p>Generate the autocompletion script for the bash shell.</p> <p>This script depends on the 'bash-completion' package. If it is not installed already, you can install it via your OS's package manager.</p> <p>To load completions in your current shell session:</p> <pre><code>source &lt;(cxcli completion bash)\n</code></pre> <p>To load completions for every new session, execute once:</p>"},{"location":"cmd/cxcli_completion_bash/#linux","title":"Linux:","text":"<pre><code>cxcli completion bash &gt; /etc/bash_completion.d/cxcli\n</code></pre>"},{"location":"cmd/cxcli_completion_bash/#macos","title":"macOS:","text":"<pre><code>cxcli completion bash &gt; $(brew --prefix)/etc/bash_completion.d/cxcli\n</code></pre> <p>You will need to start a new shell for this setup to take effect.</p> <pre><code>cxcli completion bash\n</code></pre>"},{"location":"cmd/cxcli_completion_bash/#options","title":"Options","text":"<pre><code>  -h, --help              help for bash\n      --no-descriptions   disable completion descriptions\n</code></pre>"},{"location":"cmd/cxcli_completion_bash/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file path (optional)\n  -o, --output-format string   Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command (optional)\n  -v, --verbose                verbose error output (with stack trace) (optional)\n</code></pre>"},{"location":"cmd/cxcli_completion_bash/#see-also","title":"See also","text":"<ul> <li>cxcli completion     - Generate the autocompletion script for the specified shell</li> </ul>"},{"location":"cmd/cxcli_completion_fish/","title":"cxcli completion fish","text":"<p>Generate the autocompletion script for fish</p>"},{"location":"cmd/cxcli_completion_fish/#synopsis","title":"Synopsis","text":"<p>Generate the autocompletion script for the fish shell.</p> <p>To load completions in your current shell session:</p> <pre><code>cxcli completion fish | source\n</code></pre> <p>To load completions for every new session, execute once:</p> <pre><code>cxcli completion fish &gt; ~/.config/fish/completions/cxcli.fish\n</code></pre> <p>You will need to start a new shell for this setup to take effect.</p> <pre><code>cxcli completion fish [flags]\n</code></pre>"},{"location":"cmd/cxcli_completion_fish/#options","title":"Options","text":"<pre><code>  -h, --help              help for fish\n      --no-descriptions   disable completion descriptions\n</code></pre>"},{"location":"cmd/cxcli_completion_fish/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file path (optional)\n  -o, --output-format string   Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command (optional)\n  -v, --verbose                verbose error output (with stack trace) (optional)\n</code></pre>"},{"location":"cmd/cxcli_completion_fish/#see-also","title":"See also","text":"<ul> <li>cxcli completion     - Generate the autocompletion script for the specified shell</li> </ul>"},{"location":"cmd/cxcli_completion_powershell/","title":"cxcli completion powershell","text":"<p>Generate the autocompletion script for powershell</p>"},{"location":"cmd/cxcli_completion_powershell/#synopsis","title":"Synopsis","text":"<p>Generate the autocompletion script for powershell.</p> <p>To load completions in your current shell session:</p> <pre><code>cxcli completion powershell | Out-String | Invoke-Expression\n</code></pre> <p>To load completions for every new session, add the output of the above command to your powershell profile.</p> <pre><code>cxcli completion powershell [flags]\n</code></pre>"},{"location":"cmd/cxcli_completion_powershell/#options","title":"Options","text":"<pre><code>  -h, --help              help for powershell\n      --no-descriptions   disable completion descriptions\n</code></pre>"},{"location":"cmd/cxcli_completion_powershell/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file path (optional)\n  -o, --output-format string   Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command (optional)\n  -v, --verbose                verbose error output (with stack trace) (optional)\n</code></pre>"},{"location":"cmd/cxcli_completion_powershell/#see-also","title":"See also","text":"<ul> <li>cxcli completion     - Generate the autocompletion script for the specified shell</li> </ul>"},{"location":"cmd/cxcli_completion_zsh/","title":"cxcli completion zsh","text":"<p>Generate the autocompletion script for zsh</p>"},{"location":"cmd/cxcli_completion_zsh/#synopsis","title":"Synopsis","text":"<p>Generate the autocompletion script for the zsh shell.</p> <p>If shell completion is not already enabled in your environment you will need to enable it.  You can execute the following once:</p> <pre><code>echo \"autoload -U compinit; compinit\" &gt;&gt; ~/.zshrc\n</code></pre> <p>To load completions in your current shell session:</p> <pre><code>source &lt;(cxcli completion zsh)\n</code></pre> <p>To load completions for every new session, execute once:</p>"},{"location":"cmd/cxcli_completion_zsh/#linux","title":"Linux:","text":"<pre><code>cxcli completion zsh &gt; \"${fpath[1]}/_cxcli\"\n</code></pre>"},{"location":"cmd/cxcli_completion_zsh/#macos","title":"macOS:","text":"<pre><code>cxcli completion zsh &gt; $(brew --prefix)/share/zsh/site-functions/_cxcli\n</code></pre> <p>You will need to start a new shell for this setup to take effect.</p> <pre><code>cxcli completion zsh [flags]\n</code></pre>"},{"location":"cmd/cxcli_completion_zsh/#options","title":"Options","text":"<pre><code>  -h, --help              help for zsh\n      --no-descriptions   disable completion descriptions\n</code></pre>"},{"location":"cmd/cxcli_completion_zsh/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file path (optional)\n  -o, --output-format string   Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command (optional)\n  -v, --verbose                verbose error output (with stack trace) (optional)\n</code></pre>"},{"location":"cmd/cxcli_completion_zsh/#see-also","title":"See also","text":"<ul> <li>cxcli completion     - Generate the autocompletion script for the specified shell</li> </ul>"},{"location":"cmd/cxcli_dialog/","title":"cxcli dialog","text":"<p>Test your CX Agent interactively directly from your terminal</p> <pre><code>cxcli dialog [flags]\n</code></pre>"},{"location":"cmd/cxcli_dialog/#options","title":"Options","text":"<pre><code>  -a, --agent-name string    Dialogflow CX Agent Name (required)\n  -h, --help                 help for dialog\n  -e, --locale string        Locale of the intent. Default: agent locale (optional)\n  -l, --location-id string   Dialogflow CX Location ID of the Project (required)\n  -p, --project-id string    Dialogflow CX Project ID (required)\n</code></pre>"},{"location":"cmd/cxcli_dialog/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file path (optional)\n  -o, --output-format string   Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command (optional)\n  -v, --verbose                verbose error output (with stack trace) (optional)\n</code></pre>"},{"location":"cmd/cxcli_dialog/#see-also","title":"See also","text":"<ul> <li>cxcli   - Dialogflow CX CLI</li> </ul>"},{"location":"cmd/cxcli_entity-type/","title":"cxcli entity-type","text":"<p>Actions on entity type commands</p> <pre><code>cxcli entity-type [flags]\n</code></pre>"},{"location":"cmd/cxcli_entity-type/#options","title":"Options","text":"<pre><code>  -h, --help   help for entity-type\n</code></pre>"},{"location":"cmd/cxcli_entity-type/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file path (optional)\n  -o, --output-format string   Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command (optional)\n  -v, --verbose                verbose error output (with stack trace) (optional)\n</code></pre>"},{"location":"cmd/cxcli_entity-type/#see-also","title":"See also","text":"<ul> <li>cxcli   - Dialogflow CX CLI</li> <li>cxcli entity-type create     - Creates an entity type in an agent</li> <li>cxcli entity-type delete     - Deletes an entity type in an agent</li> <li>cxcli entity-type update     - Updates an entity type in an agent</li> </ul>"},{"location":"cmd/cxcli_entity-type_create/","title":"cxcli entity-type create","text":"<p>Creates an entity type in an agent</p> <pre><code>cxcli entity-type create [entity-type-name] [flags]\n</code></pre>"},{"location":"cmd/cxcli_entity-type_create/#options","title":"Options","text":"<pre><code>  -a, --agent-name string    Dialogflow CX Agent Name (required)\n  -n, --entities strings     List of the entities for this entity type, comma separated. Format: entity1@synonym1|synonym2,entity2@synonym1|synonym2. Example: pikachu@25|pika,charmander@3 (required)\n  -h, --help                 help for create\n  -e, --locale string        Locale of the intent. Default: agent locale (optional)\n  -l, --location-id string   Dialogflow CX Location ID of the Project (required)\n  -p, --project-id string    Dialogflow CX Project ID (required)\n  -r, --redacted string      Set the entity type as redacted. Possible values: true or false (optional)\n</code></pre>"},{"location":"cmd/cxcli_entity-type_create/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file path (optional)\n  -o, --output-format string   Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command (optional)\n  -v, --verbose                verbose error output (with stack trace) (optional)\n</code></pre>"},{"location":"cmd/cxcli_entity-type_create/#see-also","title":"See also","text":"<ul> <li>cxcli entity-type   - Actions on entity type commands</li> </ul>"},{"location":"cmd/cxcli_entity-type_delete/","title":"cxcli entity-type delete","text":"<p>Deletes an entity type in an agent</p> <pre><code>cxcli entity-type delete [entity-type-name] [flags]\n</code></pre>"},{"location":"cmd/cxcli_entity-type_delete/#options","title":"Options","text":"<pre><code>  -a, --agent-name string    Dialogflow CX Agent Name (required)\n  -f, --force string         Forces to delete the Entity type. NOTE: it will delete all any references to the entity type. Possible values: true or false (optional)\n  -h, --help                 help for delete\n  -l, --location-id string   Dialogflow CX Location ID of the Project (required)\n  -p, --project-id string    Dialogflow CX Project ID (required)\n</code></pre>"},{"location":"cmd/cxcli_entity-type_delete/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file path (optional)\n  -o, --output-format string   Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command (optional)\n  -v, --verbose                verbose error output (with stack trace) (optional)\n</code></pre>"},{"location":"cmd/cxcli_entity-type_delete/#see-also","title":"See also","text":"<ul> <li>cxcli entity-type   - Actions on entity type commands</li> </ul>"},{"location":"cmd/cxcli_entity-type_update/","title":"cxcli entity-type update","text":"<p>Updates an entity type in an agent</p> <pre><code>cxcli entity-type update [entity-type-name] [flags]\n</code></pre>"},{"location":"cmd/cxcli_entity-type_update/#options","title":"Options","text":"<pre><code>  -a, --agent-name string    Dialogflow CX Agent Name (required)\n  -n, --entities strings     List of the entities for this entity type, comma separated. Format: entity1@synonym1|synonym2,entity2@synonym1|synonym2. Example: pikachu@25|pika,charmander@3 (required)\n  -h, --help                 help for update\n  -e, --locale string        Locale of the intent. Default: agent locale (optional)\n  -l, --location-id string   Dialogflow CX Location ID of the Project (required)\n  -p, --project-id string    Dialogflow CX Project ID (required)\n  -r, --redacted string      Set the entity type as redacted. Possible values: true or false (optional)\n</code></pre>"},{"location":"cmd/cxcli_entity-type_update/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file path (optional)\n  -o, --output-format string   Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command (optional)\n  -v, --verbose                verbose error output (with stack trace) (optional)\n</code></pre>"},{"location":"cmd/cxcli_entity-type_update/#see-also","title":"See also","text":"<ul> <li>cxcli entity-type   - Actions on entity type commands</li> </ul>"},{"location":"cmd/cxcli_environment/","title":"cxcli environment","text":"<p>Actions on environment</p> <pre><code>cxcli environment [flags]\n</code></pre>"},{"location":"cmd/cxcli_environment/#options","title":"Options","text":"<pre><code>  -h, --help   help for environment\n</code></pre>"},{"location":"cmd/cxcli_environment/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file path (optional)\n  -o, --output-format string   Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command (optional)\n  -v, --verbose                verbose error output (with stack trace) (optional)\n</code></pre>"},{"location":"cmd/cxcli_environment/#see-also","title":"See also","text":"<ul> <li>cxcli   - Dialogflow CX CLI</li> <li>cxcli environment create     - create an environment</li> <li>cxcli environment delete     - delete an environment</li> <li>cxcli environment execute-cicd     - Executes a CI/CD pipeline for a specific environment</li> <li>cxcli environment update     - update an environment</li> </ul>"},{"location":"cmd/cxcli_environment_create/","title":"cxcli environment create","text":"<p>create an environment</p> <pre><code>cxcli environment create [name] [flags]\n</code></pre>"},{"location":"cmd/cxcli_environment_create/#options","title":"Options","text":"<pre><code>  -a, --agent-name string       Dialogflow CX Agent Name (required)\n  -d, --description string      Description for this environment (optional)\n  -s, --flow-versions strings   List of Flow and its version to be added to this environment, comma separated. Format: flowName1@version1,flowName2|version2. Example: Default Start Flow@v1.0.0|Buy Flow@v1.0.1 (required)\n  -h, --help                    help for create\n  -l, --location-id string      Dialogflow CX Location ID of the Project (required)\n  -p, --project-id string       Dialogflow CX Project ID (required)\n</code></pre>"},{"location":"cmd/cxcli_environment_create/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file path (optional)\n  -o, --output-format string   Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command (optional)\n  -v, --verbose                verbose error output (with stack trace) (optional)\n</code></pre>"},{"location":"cmd/cxcli_environment_create/#see-also","title":"See also","text":"<ul> <li>cxcli environment   - Actions on environment</li> </ul>"},{"location":"cmd/cxcli_environment_delete/","title":"cxcli environment delete","text":"<p>delete an environment</p> <pre><code>cxcli environment delete [name] [flags]\n</code></pre>"},{"location":"cmd/cxcli_environment_delete/#options","title":"Options","text":"<pre><code>  -a, --agent-name string    Dialogflow CX Agent Name (required)\n  -h, --help                 help for delete\n  -l, --location-id string   Dialogflow CX Location ID of the Project (required)\n  -p, --project-id string    Dialogflow CX Project ID (required)\n</code></pre>"},{"location":"cmd/cxcli_environment_delete/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file path (optional)\n  -o, --output-format string   Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command (optional)\n  -v, --verbose                verbose error output (with stack trace) (optional)\n</code></pre>"},{"location":"cmd/cxcli_environment_delete/#see-also","title":"See also","text":"<ul> <li>cxcli environment   - Actions on environment</li> </ul>"},{"location":"cmd/cxcli_environment_execute-cicd/","title":"cxcli environment execute-cicd","text":"<p>Executes a CI/CD pipeline for a specific environment</p> <pre><code>cxcli environment execute-cicd [environment] [flags]\n</code></pre>"},{"location":"cmd/cxcli_environment_execute-cicd/#options","title":"Options","text":"<pre><code>  -a, --agent-name string    Dialogflow CX Agent Name (required)\n  -h, --help                 help for execute-cicd\n  -l, --location-id string   Dialogflow CX Location ID of the Project (required)\n  -p, --project-id string    Dialogflow CX Project ID (required)\n</code></pre>"},{"location":"cmd/cxcli_environment_execute-cicd/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file path (optional)\n  -o, --output-format string   Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command (optional)\n  -v, --verbose                verbose error output (with stack trace) (optional)\n</code></pre>"},{"location":"cmd/cxcli_environment_execute-cicd/#see-also","title":"See also","text":"<ul> <li>cxcli environment   - Actions on environment</li> </ul>"},{"location":"cmd/cxcli_environment_update/","title":"cxcli environment update","text":"<p>update an environment</p> <pre><code>cxcli environment update [name] [flags]\n</code></pre>"},{"location":"cmd/cxcli_environment_update/#options","title":"Options","text":"<pre><code>  -a, --agent-name string       Dialogflow CX Agent Name (required)\n  -d, --description string      Description for this environment (optional)\n  -s, --flow-versions strings   List of Flow and its version to be added to this environment, comma separated. Format: flowName1@version1,flowName2|version2. Example: Default Start Flow@v1.0.0|Buy Flow@v1.0.1 (required)\n  -h, --help                    help for update\n  -l, --location-id string      Dialogflow CX Location ID of the Project (required)\n  -p, --project-id string       Dialogflow CX Project ID (required)\n</code></pre>"},{"location":"cmd/cxcli_environment_update/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file path (optional)\n  -o, --output-format string   Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command (optional)\n  -v, --verbose                verbose error output (with stack trace) (optional)\n</code></pre>"},{"location":"cmd/cxcli_environment_update/#see-also","title":"See also","text":"<ul> <li>cxcli environment   - Actions on environment</li> </ul>"},{"location":"cmd/cxcli_flow-version/","title":"cxcli flow-version","text":"<p>Actions on flow versions commands</p> <pre><code>cxcli flow-version [flags]\n</code></pre>"},{"location":"cmd/cxcli_flow-version/#options","title":"Options","text":"<pre><code>  -h, --help   help for flow-version\n</code></pre>"},{"location":"cmd/cxcli_flow-version/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file path (optional)\n  -o, --output-format string   Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command (optional)\n  -v, --verbose                verbose error output (with stack trace) (optional)\n</code></pre>"},{"location":"cmd/cxcli_flow-version/#see-also","title":"See also","text":"<ul> <li>cxcli   - Dialogflow CX CLI</li> <li>cxcli flow-version create   - create a version</li> <li>cxcli flow-version delete   - delete a version</li> <li>cxcli flow-version update   - update a version</li> </ul>"},{"location":"cmd/cxcli_flow-version_create/","title":"cxcli flow-version create","text":"<p>create a version</p> <pre><code>cxcli flow-version create [name] [flags]\n</code></pre>"},{"location":"cmd/cxcli_flow-version_create/#options","title":"Options","text":"<pre><code>  -a, --agent-name string    Dialogflow CX Agent Name (required)\n  -d, --description string   Description for this version (optional)\n  -h, --help                 help for create\n  -l, --location-id string   Dialogflow CX Location ID of the Project (required)\n  -p, --project-id string    Dialogflow CX Project ID (required)\n  -s, --start-flow string    Start Flow name to create the version (required)\n</code></pre>"},{"location":"cmd/cxcli_flow-version_create/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file path (optional)\n  -o, --output-format string   Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command (optional)\n  -v, --verbose                verbose error output (with stack trace) (optional)\n</code></pre>"},{"location":"cmd/cxcli_flow-version_create/#see-also","title":"See also","text":"<ul> <li>cxcli flow-version     - Actions on flow versions commands</li> </ul>"},{"location":"cmd/cxcli_flow-version_delete/","title":"cxcli flow-version delete","text":"<p>delete a version</p> <pre><code>cxcli flow-version delete [name] [flags]\n</code></pre>"},{"location":"cmd/cxcli_flow-version_delete/#options","title":"Options","text":"<pre><code>  -a, --agent-name string    Dialogflow CX Agent Name (required)\n  -h, --help                 help for delete\n  -l, --location-id string   Dialogflow CX Location ID of the Project (required)\n  -p, --project-id string    Dialogflow CX Project ID (required)\n  -s, --start-flow string    Start Flow name to create the version (required)\n</code></pre>"},{"location":"cmd/cxcli_flow-version_delete/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file path (optional)\n  -o, --output-format string   Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command (optional)\n  -v, --verbose                verbose error output (with stack trace) (optional)\n</code></pre>"},{"location":"cmd/cxcli_flow-version_delete/#see-also","title":"See also","text":"<ul> <li>cxcli flow-version     - Actions on flow versions commands</li> </ul>"},{"location":"cmd/cxcli_flow-version_update/","title":"cxcli flow-version update","text":"<p>update a version</p> <pre><code>cxcli flow-version update [name] [flags]\n</code></pre>"},{"location":"cmd/cxcli_flow-version_update/#options","title":"Options","text":"<pre><code>  -a, --agent-name string    Dialogflow CX Agent Name (required)\n  -d, --description string   Description for this version (optional)\n  -h, --help                 help for update\n  -l, --location-id string   Dialogflow CX Location ID of the Project (required)\n  -p, --project-id string    Dialogflow CX Project ID (required)\n  -s, --start-flow string    Start Flow name to create the version (required)\n</code></pre>"},{"location":"cmd/cxcli_flow-version_update/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file path (optional)\n  -o, --output-format string   Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command (optional)\n  -v, --verbose                verbose error output (with stack trace) (optional)\n</code></pre>"},{"location":"cmd/cxcli_flow-version_update/#see-also","title":"See also","text":"<ul> <li>cxcli flow-version     - Actions on flow versions commands</li> </ul>"},{"location":"cmd/cxcli_flow/","title":"cxcli flow","text":"<p>Actions on flow commands</p> <pre><code>cxcli flow [flags]\n</code></pre>"},{"location":"cmd/cxcli_flow/#options","title":"Options","text":"<pre><code>  -h, --help   help for flow\n</code></pre>"},{"location":"cmd/cxcli_flow/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file path (optional)\n  -o, --output-format string   Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command (optional)\n  -v, --verbose                verbose error output (with stack trace) (optional)\n</code></pre>"},{"location":"cmd/cxcli_flow/#see-also","title":"See also","text":"<ul> <li>cxcli   - Dialogflow CX CLI</li> <li>cxcli flow create   - Creates a flow in an agent</li> <li>cxcli flow delete   - Deletes a flow in an agent</li> <li>cxcli flow train     - Trains a flow in an agent. If flow name is set to \"all\", it will train all flows in an agent</li> <li>cxcli flow update   - Updates a flow in an agent</li> </ul>"},{"location":"cmd/cxcli_flow_create/","title":"cxcli flow create","text":"<p>Creates a flow in an agent</p> <pre><code>cxcli flow create [flow-name] [flags]\n</code></pre>"},{"location":"cmd/cxcli_flow_create/#options","title":"Options","text":"<pre><code>  -a, --agent-name string                     Dialogflow CX Agent Name (required)\n  -d, --description string                    Description for this flow (optional)\n  -h, --help                                  help for create\n  -e, --locale string                         Locale of the flow. Default: agent locale (optional)\n  -l, --location-id string                    Dialogflow CX Location ID of the Project (required)\n  -s, --nlu-classification-threshold string   NLU Classification Threshold. From 0.0 (completely uncertain) to 1.0 (completely certain). Default: 0.3 (optional) (default \"0.3\")\n  -t, --nlu-model-training-mode string        NLU Model training mode. Possible values: automatic or manual. Default: manual (optional) (default \"manual\")\n  -m, --nlu-model-type string                 NLU Model Type. Possible values: advanced or standard. Default: standard (optional) (default \"standard\")\n  -p, --project-id string                     Dialogflow CX Project ID (required)\n</code></pre>"},{"location":"cmd/cxcli_flow_create/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file path (optional)\n  -o, --output-format string   Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command (optional)\n  -v, --verbose                verbose error output (with stack trace) (optional)\n</code></pre>"},{"location":"cmd/cxcli_flow_create/#see-also","title":"See also","text":"<ul> <li>cxcli flow     - Actions on flow commands</li> </ul>"},{"location":"cmd/cxcli_flow_delete/","title":"cxcli flow delete","text":"<p>Deletes a flow in an agent</p> <pre><code>cxcli flow delete [flow-name] [flags]\n</code></pre>"},{"location":"cmd/cxcli_flow_delete/#options","title":"Options","text":"<pre><code>  -a, --agent-name string    Dialogflow CX Agent Name (required)\n  -h, --help                 help for delete\n  -l, --location-id string   Dialogflow CX Location ID of the Project (required)\n  -p, --project-id string    Dialogflow CX Project ID (required)\n</code></pre>"},{"location":"cmd/cxcli_flow_delete/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file path (optional)\n  -o, --output-format string   Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command (optional)\n  -v, --verbose                verbose error output (with stack trace) (optional)\n</code></pre>"},{"location":"cmd/cxcli_flow_delete/#see-also","title":"See also","text":"<ul> <li>cxcli flow     - Actions on flow commands</li> </ul>"},{"location":"cmd/cxcli_flow_train/","title":"cxcli flow train","text":"<p>Trains a flow in an agent. If flow name is set to \"all\", it will train all flows in an agent</p> <pre><code>cxcli flow train [flow-name] [flags]\n</code></pre>"},{"location":"cmd/cxcli_flow_train/#options","title":"Options","text":"<pre><code>  -a, --agent-name string    Dialogflow CX Agent Name (required)\n  -h, --help                 help for train\n  -l, --location-id string   Dialogflow CX Location ID of the Project (required)\n  -p, --project-id string    Dialogflow CX Project ID (required)\n</code></pre>"},{"location":"cmd/cxcli_flow_train/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file path (optional)\n  -o, --output-format string   Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command (optional)\n  -v, --verbose                verbose error output (with stack trace) (optional)\n</code></pre>"},{"location":"cmd/cxcli_flow_train/#see-also","title":"See also","text":"<ul> <li>cxcli flow     - Actions on flow commands</li> </ul>"},{"location":"cmd/cxcli_flow_update/","title":"cxcli flow update","text":"<p>Updates a flow in an agent</p> <pre><code>cxcli flow update [flow-name] [flags]\n</code></pre>"},{"location":"cmd/cxcli_flow_update/#options","title":"Options","text":"<pre><code>  -a, --agent-name string                     Dialogflow CX Agent Name (required)\n  -d, --description string                    Description for this flow (optional)\n  -h, --help                                  help for update\n  -e, --locale string                         Locale of the flow. Default: agent locale (optional)\n  -l, --location-id string                    Dialogflow CX Location ID of the Project (required)\n  -s, --nlu-classification-threshold string   NLU Classification Threshold. From 0.0 (completely uncertain) to 1.0 (completely certain). (optional)\n  -t, --nlu-model-training-mode string        NLU Model training mode. Possible values: automatic or manual (optional)\n  -m, --nlu-model-type string                 NLU Model Type. Possible values: advanced or standard (optional)\n  -p, --project-id string                     Dialogflow CX Project ID (required)\n</code></pre>"},{"location":"cmd/cxcli_flow_update/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file path (optional)\n  -o, --output-format string   Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command (optional)\n  -v, --verbose                verbose error output (with stack trace) (optional)\n</code></pre>"},{"location":"cmd/cxcli_flow_update/#see-also","title":"See also","text":"<ul> <li>cxcli flow     - Actions on flow commands</li> </ul>"},{"location":"cmd/cxcli_generator/","title":"cxcli generator","text":"<p>Actions on generator commands</p> <pre><code>cxcli generator [flags]\n</code></pre>"},{"location":"cmd/cxcli_generator/#options","title":"Options","text":"<pre><code>  -h, --help   help for generator\n</code></pre>"},{"location":"cmd/cxcli_generator/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file path (optional)\n  -o, --output-format string   Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command (optional)\n  -v, --verbose                verbose error output (with stack trace) (optional)\n</code></pre>"},{"location":"cmd/cxcli_generator/#see-also","title":"See also","text":"<ul> <li>cxcli   - Dialogflow CX CLI</li> <li>cxcli generator create     - create a generator</li> <li>cxcli generator delete     - delete a generator</li> <li>cxcli generator update     - update a generator</li> </ul>"},{"location":"cmd/cxcli_generator_create/","title":"cxcli generator create","text":"<p>create a generator</p> <pre><code>cxcli generator create [name] [flags]\n</code></pre>"},{"location":"cmd/cxcli_generator_create/#options","title":"Options","text":"<pre><code>  -a, --agent-name string    Dialogflow CX Agent Name (required)\n  -h, --help                 help for create\n  -e, --locale string        Locale of the generator. Default: agent locale (optional)\n  -l, --location-id string   Dialogflow CX Location ID of the Project (required)\n  -p, --project-id string    Dialogflow CX Project ID (required)\n  -r, --prompt string        Prompt (required)\n</code></pre>"},{"location":"cmd/cxcli_generator_create/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file path (optional)\n  -o, --output-format string   Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command (optional)\n  -v, --verbose                verbose error output (with stack trace) (optional)\n</code></pre>"},{"location":"cmd/cxcli_generator_create/#see-also","title":"See also","text":"<ul> <li>cxcli generator   - Actions on generator commands</li> </ul>"},{"location":"cmd/cxcli_generator_delete/","title":"cxcli generator delete","text":"<p>delete a generator</p> <pre><code>cxcli generator delete [name] [flags]\n</code></pre>"},{"location":"cmd/cxcli_generator_delete/#options","title":"Options","text":"<pre><code>  -a, --agent-name string    Dialogflow CX Agent Name (required)\n  -f, --force string         Forces to delete the generator and its references. Possible values: true or false (optional)\n  -h, --help                 help for delete\n  -l, --location-id string   Dialogflow CX Location ID of the Project (required)\n  -p, --project-id string    Dialogflow CX Project ID (required)\n</code></pre>"},{"location":"cmd/cxcli_generator_delete/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file path (optional)\n  -o, --output-format string   Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command (optional)\n  -v, --verbose                verbose error output (with stack trace) (optional)\n</code></pre>"},{"location":"cmd/cxcli_generator_delete/#see-also","title":"See also","text":"<ul> <li>cxcli generator   - Actions on generator commands</li> </ul>"},{"location":"cmd/cxcli_generator_update/","title":"cxcli generator update","text":"<p>update a generator</p> <pre><code>cxcli generator update [name] [flags]\n</code></pre>"},{"location":"cmd/cxcli_generator_update/#options","title":"Options","text":"<pre><code>  -a, --agent-name string    Dialogflow CX Agent Name (required)\n  -h, --help                 help for update\n  -e, --locale string        Locale of the generator. Default: agent locale (optional)\n  -l, --location-id string   Dialogflow CX Location ID of the Project (required)\n  -p, --project-id string    Dialogflow CX Project ID (required)\n  -r, --prompt string        Prompt (required)\n</code></pre>"},{"location":"cmd/cxcli_generator_update/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file path (optional)\n  -o, --output-format string   Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command (optional)\n  -v, --verbose                verbose error output (with stack trace) (optional)\n</code></pre>"},{"location":"cmd/cxcli_generator_update/#see-also","title":"See also","text":"<ul> <li>cxcli generator   - Actions on generator commands</li> </ul>"},{"location":"cmd/cxcli_intent/","title":"cxcli intent","text":"<p>Actions on intent commands</p> <pre><code>cxcli intent [flags]\n</code></pre>"},{"location":"cmd/cxcli_intent/#options","title":"Options","text":"<pre><code>  -h, --help   help for intent\n</code></pre>"},{"location":"cmd/cxcli_intent/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file path (optional)\n  -o, --output-format string   Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command (optional)\n  -v, --verbose                verbose error output (with stack trace) (optional)\n</code></pre>"},{"location":"cmd/cxcli_intent/#see-also","title":"See also","text":"<ul> <li>cxcli   - Dialogflow CX CLI</li> <li>cxcli intent create   - Creates an intent in an agent</li> <li>cxcli intent delete   - Deletes an intent in an agent</li> <li>cxcli intent update   - Updates an intent in an agent</li> </ul>"},{"location":"cmd/cxcli_intent_create/","title":"cxcli intent create","text":"<p>Creates an intent in an agent</p> <pre><code>cxcli intent create [intent-name] [flags]\n</code></pre>"},{"location":"cmd/cxcli_intent_create/#options","title":"Options","text":"<pre><code>  -a, --agent-name string          Dialogflow CX Agent Name (required)\n  -d, --description string         Description for this intent (optional)\n  -h, --help                       help for create\n  -e, --locale string              Locale of the intent. Default: agent locale (optional)\n  -l, --location-id string         Dialogflow CX Location ID of the Project (required)\n  -p, --project-id string          Dialogflow CX Project ID (required)\n  -t, --training-phrases strings   List of the training phrases for this intent, comma separated. Entities, add @entity-type to the word: word@entity-type in the training phrase. Example: hello,hi how are you today@sys.date,morning!. (required)\n</code></pre>"},{"location":"cmd/cxcli_intent_create/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file path (optional)\n  -o, --output-format string   Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command (optional)\n  -v, --verbose                verbose error output (with stack trace) (optional)\n</code></pre>"},{"location":"cmd/cxcli_intent_create/#see-also","title":"See also","text":"<ul> <li>cxcli intent     - Actions on intent commands</li> </ul>"},{"location":"cmd/cxcli_intent_delete/","title":"cxcli intent delete","text":"<p>Deletes an intent in an agent</p> <pre><code>cxcli intent delete [intent-name] [flags]\n</code></pre>"},{"location":"cmd/cxcli_intent_delete/#options","title":"Options","text":"<pre><code>  -a, --agent-name string    Dialogflow CX Agent Name (required)\n  -h, --help                 help for delete\n  -l, --location-id string   Dialogflow CX Location ID of the Project (required)\n  -p, --project-id string    Dialogflow CX Project ID (required)\n</code></pre>"},{"location":"cmd/cxcli_intent_delete/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file path (optional)\n  -o, --output-format string   Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command (optional)\n  -v, --verbose                verbose error output (with stack trace) (optional)\n</code></pre>"},{"location":"cmd/cxcli_intent_delete/#see-also","title":"See also","text":"<ul> <li>cxcli intent     - Actions on intent commands</li> </ul>"},{"location":"cmd/cxcli_intent_update/","title":"cxcli intent update","text":"<p>Updates an intent in an agent</p> <pre><code>cxcli intent update [intent-name] [flags]\n</code></pre>"},{"location":"cmd/cxcli_intent_update/#options","title":"Options","text":"<pre><code>  -a, --agent-name string          Dialogflow CX Agent Name (required)\n  -d, --description string         Description for this intent (optional)\n  -h, --help                       help for update\n  -e, --locale string              Locale of the intent. Default: agent locale (optional)\n  -l, --location-id string         Dialogflow CX Location ID of the Project (required)\n  -p, --project-id string          Dialogflow CX Project ID (required)\n  -t, --training-phrases strings   List of the training phrases for this intent, comma separated. Entities, add @entity-type to the word: word@entity-type in the training phrase. Example: hello,hi how are you today@sys.date,morning!. (Optional)\n</code></pre>"},{"location":"cmd/cxcli_intent_update/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file path (optional)\n  -o, --output-format string   Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command (optional)\n  -v, --verbose                verbose error output (with stack trace) (optional)\n</code></pre>"},{"location":"cmd/cxcli_intent_update/#see-also","title":"See also","text":"<ul> <li>cxcli intent     - Actions on intent commands</li> </ul>"},{"location":"cmd/cxcli_jsonschema/","title":"cxcli jsonschema","text":"<p>outputs cxcli's JSON schema</p> <pre><code>cxcli jsonschema [flags]\n</code></pre>"},{"location":"cmd/cxcli_jsonschema/#options","title":"Options","text":"<pre><code>  -h, --help                   help for jsonschema\n  -f, --output-folder string   Where to save the JSONSchema file (default \"-\")\n</code></pre>"},{"location":"cmd/cxcli_jsonschema/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file path (optional)\n  -o, --output-format string   Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command (optional)\n  -v, --verbose                verbose error output (with stack trace) (optional)\n</code></pre>"},{"location":"cmd/cxcli_jsonschema/#see-also","title":"See also","text":"<ul> <li>cxcli   - Dialogflow CX CLI</li> </ul>"},{"location":"cmd/cxcli_profile-conversation/","title":"cxcli profile-conversation","text":"<p>Actions on conversation testing</p> <pre><code>cxcli profile-conversation [flags]\n</code></pre>"},{"location":"cmd/cxcli_profile-conversation/#options","title":"Options","text":"<pre><code>  -h, --help   help for profile-conversation\n</code></pre>"},{"location":"cmd/cxcli_profile-conversation/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file path (optional)\n  -o, --output-format string   Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command (optional)\n  -v, --verbose                verbose error output (with stack trace) (optional)\n</code></pre>"},{"location":"cmd/cxcli_profile-conversation/#see-also","title":"See also","text":"<ul> <li>cxcli   - Dialogflow CX CLI</li> <li>cxcli profile-conversation execute     - Execute a suite</li> </ul>"},{"location":"cmd/cxcli_profile-conversation_execute/","title":"cxcli profile-conversation execute","text":"<p>Execute a suite</p> <pre><code>cxcli profile-conversation execute [suite-file] [flags]\n</code></pre>"},{"location":"cmd/cxcli_profile-conversation_execute/#options","title":"Options","text":"<pre><code>  -h, --help   help for execute\n</code></pre>"},{"location":"cmd/cxcli_profile-conversation_execute/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file path (optional)\n  -o, --output-format string   Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command (optional)\n  -v, --verbose                verbose error output (with stack trace) (optional)\n</code></pre>"},{"location":"cmd/cxcli_profile-conversation_execute/#see-also","title":"See also","text":"<ul> <li>cxcli profile-conversation     - Actions on conversation testing</li> </ul>"},{"location":"cmd/cxcli_profile-nlu/","title":"cxcli profile-nlu","text":"<p>Actions on NLU testing</p> <pre><code>cxcli profile-nlu [flags]\n</code></pre>"},{"location":"cmd/cxcli_profile-nlu/#options","title":"Options","text":"<pre><code>  -h, --help   help for profile-nlu\n</code></pre>"},{"location":"cmd/cxcli_profile-nlu/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file path (optional)\n  -o, --output-format string   Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command (optional)\n  -v, --verbose                verbose error output (with stack trace) (optional)\n</code></pre>"},{"location":"cmd/cxcli_profile-nlu/#see-also","title":"See also","text":"<ul> <li>cxcli   - Dialogflow CX CLI</li> <li>cxcli profile-nlu execute   - Execute a suite</li> </ul>"},{"location":"cmd/cxcli_profile-nlu_execute/","title":"cxcli profile-nlu execute","text":"<p>Execute a suite</p> <pre><code>cxcli profile-nlu execute [suite-file] [flags]\n</code></pre>"},{"location":"cmd/cxcli_profile-nlu_execute/#options","title":"Options","text":"<pre><code>  -h, --help   help for execute\n</code></pre>"},{"location":"cmd/cxcli_profile-nlu_execute/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file path (optional)\n  -o, --output-format string   Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command (optional)\n  -v, --verbose                verbose error output (with stack trace) (optional)\n</code></pre>"},{"location":"cmd/cxcli_profile-nlu_execute/#see-also","title":"See also","text":"<ul> <li>cxcli profile-nlu   - Actions on NLU testing</li> </ul>"},{"location":"cmd/cxcli_stt/","title":"cxcli stt","text":"<p>Actions on speech-to-text commands</p> <pre><code>cxcli stt [flags]\n</code></pre>"},{"location":"cmd/cxcli_stt/#options","title":"Options","text":"<pre><code>  -h, --help   help for stt\n</code></pre>"},{"location":"cmd/cxcli_stt/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file path (optional)\n  -o, --output-format string   Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command (optional)\n  -v, --verbose                verbose error output (with stack trace) (optional)\n</code></pre>"},{"location":"cmd/cxcli_stt/#see-also","title":"See also","text":"<ul> <li>cxcli   - Dialogflow CX CLI</li> <li>cxcli stt recognize   - Transforms audio into text</li> </ul>"},{"location":"cmd/cxcli_stt_recognize/","title":"cxcli stt recognize","text":"<p>Transforms audio into text</p> <pre><code>cxcli stt recognize [input] [flags]\n</code></pre>"},{"location":"cmd/cxcli_stt_recognize/#options","title":"Options","text":"<pre><code>  -h, --help            help for recognize\n  -l, --locale string   Input locale (required)\n</code></pre>"},{"location":"cmd/cxcli_stt_recognize/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file path (optional)\n  -o, --output-format string   Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command (optional)\n  -v, --verbose                verbose error output (with stack trace) (optional)\n</code></pre>"},{"location":"cmd/cxcli_stt_recognize/#see-also","title":"See also","text":"<ul> <li>cxcli stt   - Actions on speech-to-text commands</li> </ul>"},{"location":"cmd/cxcli_tts/","title":"cxcli tts","text":"<p>Actions on text-to-speech commands</p> <pre><code>cxcli tts [flags]\n</code></pre>"},{"location":"cmd/cxcli_tts/#options","title":"Options","text":"<pre><code>  -h, --help   help for tts\n</code></pre>"},{"location":"cmd/cxcli_tts/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file path (optional)\n  -o, --output-format string   Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command (optional)\n  -v, --verbose                verbose error output (with stack trace) (optional)\n</code></pre>"},{"location":"cmd/cxcli_tts/#see-also","title":"See also","text":"<ul> <li>cxcli   - Dialogflow CX CLI</li> <li>cxcli tts synthesize     - Transforms text into audio</li> </ul>"},{"location":"cmd/cxcli_tts_synthesize/","title":"cxcli tts synthesize","text":"<p>Transforms text into audio</p> <pre><code>cxcli tts synthesize [input] [flags]\n</code></pre>"},{"location":"cmd/cxcli_tts_synthesize/#options","title":"Options","text":"<pre><code>  -h, --help                 help for synthesize\n  -l, --locale string        Input locale (required)\n  -f, --output-file string   Output file name. Default: output.mp3 (optional) (default \"output.mp3\")\n</code></pre>"},{"location":"cmd/cxcli_tts_synthesize/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file path (optional)\n  -o, --output-format string   Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command (optional)\n  -v, --verbose                verbose error output (with stack trace) (optional)\n</code></pre>"},{"location":"cmd/cxcli_tts_synthesize/#see-also","title":"See also","text":"<ul> <li>cxcli tts   - Actions on text-to-speech commands</li> </ul>"},{"location":"cmd/cxcli_version/","title":"cxcli version","text":"<p>Get cxcli version</p> <pre><code>cxcli version [flags]\n</code></pre>"},{"location":"cmd/cxcli_version/#options","title":"Options","text":"<pre><code>  -h, --help   help for version\n</code></pre>"},{"location":"cmd/cxcli_version/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file path (optional)\n  -o, --output-format string   Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command (optional)\n  -v, --verbose                verbose error output (with stack trace) (optional)\n</code></pre>"},{"location":"cmd/cxcli_version/#see-also","title":"See also","text":"<ul> <li>cxcli   - Dialogflow CX CLI</li> </ul>"},{"location":"cmd/cxcli_webhook/","title":"cxcli webhook","text":"<p>Actions on webhook commands</p> <pre><code>cxcli webhook [flags]\n</code></pre>"},{"location":"cmd/cxcli_webhook/#options","title":"Options","text":"<pre><code>  -h, --help   help for webhook\n</code></pre>"},{"location":"cmd/cxcli_webhook/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file path (optional)\n  -o, --output-format string   Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command (optional)\n  -v, --verbose                verbose error output (with stack trace) (optional)\n</code></pre>"},{"location":"cmd/cxcli_webhook/#see-also","title":"See also","text":"<ul> <li>cxcli   - Dialogflow CX CLI</li> <li>cxcli webhook create     - create a webhook</li> <li>cxcli webhook delete     - delete a webhook</li> <li>cxcli webhook update     - update a webhook</li> </ul>"},{"location":"cmd/cxcli_webhook_create/","title":"cxcli webhook create","text":"<p>create a webhook</p> <pre><code>cxcli webhook create [name] [flags]\n</code></pre>"},{"location":"cmd/cxcli_webhook_create/#options","title":"Options","text":"<pre><code>  -a, --agent-name string           Dialogflow CX Agent Name (required)\n  -e, --environment string          Environment where you want to set the webhook url. Default: global (optional) (default \"global\")\n  -f, --flexible string             Creates a flexible webhook. Possible values: true or false (optional) (default \"false\")\n  -h, --help                        help for create\n  -l, --location-id string          Dialogflow CX Location ID of the Project (required)\n  -m, --parameters-mapping string   Creates a parameter mapping for flexible webhook, comma separated. The format is parameter@json-path,paramter2@json-path2. Example: my-param@$.fully.qualified.path.to.field (required only if flexible is true)\n  -p, --project-id string           Dialogflow CX Project ID (required)\n  -t, --request-body string         Creates a request body for flexible webhook. It has to be in JSON Format (required only if flexible is true)\n  -r, --url string                  Webhook URL (required)\n</code></pre>"},{"location":"cmd/cxcli_webhook_create/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file path (optional)\n  -o, --output-format string   Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command (optional)\n  -v, --verbose                verbose error output (with stack trace) (optional)\n</code></pre>"},{"location":"cmd/cxcli_webhook_create/#see-also","title":"See also","text":"<ul> <li>cxcli webhook   - Actions on webhook commands</li> </ul>"},{"location":"cmd/cxcli_webhook_delete/","title":"cxcli webhook delete","text":"<p>delete a webhook</p> <pre><code>cxcli webhook delete [name] [flags]\n</code></pre>"},{"location":"cmd/cxcli_webhook_delete/#options","title":"Options","text":"<pre><code>  -a, --agent-name string    Dialogflow CX Agent Name (required)\n  -f, --force string         Forces to delete the webhook and its references in environments and flows. Possible values: true or false (optional)\n  -h, --help                 help for delete\n  -l, --location-id string   Dialogflow CX Location ID of the Project (required)\n  -p, --project-id string    Dialogflow CX Project ID (required)\n</code></pre>"},{"location":"cmd/cxcli_webhook_delete/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file path (optional)\n  -o, --output-format string   Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command (optional)\n  -v, --verbose                verbose error output (with stack trace) (optional)\n</code></pre>"},{"location":"cmd/cxcli_webhook_delete/#see-also","title":"See also","text":"<ul> <li>cxcli webhook   - Actions on webhook commands</li> </ul>"},{"location":"cmd/cxcli_webhook_update/","title":"cxcli webhook update","text":"<p>update a webhook</p> <pre><code>cxcli webhook update [name] [flags]\n</code></pre>"},{"location":"cmd/cxcli_webhook_update/#options","title":"Options","text":"<pre><code>  -a, --agent-name string           Dialogflow CX Agent Name (required)\n  -e, --environment string          Environment where you want to set the webhook url. Default: global (optional) (default \"global\")\n  -f, --flexible string             Creates a flexible webhook. Possible values: true or false (optional) (default \"false\")\n  -h, --help                        help for update\n  -l, --location-id string          Dialogflow CX Location ID of the Project (required)\n  -m, --parameters-mapping string   Creates a parameter mapping for flexible webhook, comma separated. The format is parameter@json-path,paramter2@json-path2. Example: my-param@$.fully.qualified.path.to.field. This only applies to flexible webhooks (optional)\n  -p, --project-id string           Dialogflow CX Project ID (required)\n  -t, --request-body string         Creates a request body for flexible webhook. It has to be in JSON Format. This only applies to flexible webhooks (optional)\n  -r, --url string                  Webhook URL (required)\n</code></pre>"},{"location":"cmd/cxcli_webhook_update/#options-inherited-from-parent-commands","title":"Options inherited from parent commands","text":"<pre><code>  -c, --credentials string     Google Cloud credentials JSON file path (optional)\n  -o, --output-format string   Output Format. Options: text, json. Default: text (optional) (default \"text\")\n  -u, --skip-update-check      Skip the check for updates check run before every command (optional)\n  -v, --verbose                verbose error output (with stack trace) (optional)\n</code></pre>"},{"location":"cmd/cxcli_webhook_update/#see-also","title":"See also","text":"<ul> <li>cxcli webhook   - Actions on webhook commands</li> </ul>"},{"location":"community/contributing/","title":"Contributing","text":"<p>By participating in this project, you agree to abide by our code of conduct.</p>"},{"location":"community/contributing/#set-up-your-machine","title":"Set up your machine","text":"<p><code>cxcli</code> is written in Go.</p> <p>Prerequisites:</p> <ul> <li>Go 1.20+</li> </ul> <p>Other things you might need to run the tests:</p> <ul> <li>cosign</li> <li>Docker</li> <li>Podman</li> <li>Snapcraft</li> <li>Syft</li> </ul> <p>Clone <code>cxcli</code> anywhere:</p> <pre><code>git clone git@github.com:xavidop/dialogflow-cx-cli.git\n</code></pre> <p><code>cd</code> into the directory and install the dependencies:</p> <pre><code>go mod tidy\n</code></pre> <p>A good way of making sure everything is all right is running the build:</p> <pre><code>go build -o cxcli .\n</code></pre>"},{"location":"community/contributing/#test-your-change","title":"Test your change","text":"<p>You can create a branch for your changes and try to build from the source as you go:</p> <pre><code>go build -o cxcli .\n</code></pre>"},{"location":"community/contributing/#create-a-commit","title":"Create a commit","text":"<p>Commit messages should be well formatted, and to make that \"standardized\", we are using Conventional Commits.</p> <p>You can follow the documentation on their website.</p>"},{"location":"community/contributing/#submit-a-pull-request","title":"Submit a pull request","text":"<p>Push your branch to your <code>cxcli</code> fork and open a pull request against the main branch.</p>"},{"location":"community/contributing/#financial-contributions","title":"Financial contributions","text":"<p>You can contribute in our GitHub Sponsors or to any of the contributors directly. See this page for more details.</p>"},{"location":"community/sponsors/","title":"Sponsors","text":"<p>Do you or your company use cxcli? You can help keep the project bug-free and feature rich by sponsoring the project and its maintainers.</p>"},{"location":"community/sponsors/#github-sponsors","title":"GitHub Sponsors","text":"<p>GitHub Sponsors is a great way to contribute directly to the primary maintainer, xavidop.</p> <p>This money usually goes to buying coffee, beer, better hardware, and, hopefully, one day, paying the bills.</p> <p>You can sponsor and see who's sponsoring Xavier Portilla Edo here.</p> <p>\u2728\u2728 Thanks for your support! \u2728\u2728</p>"},{"location":"community/users/","title":"Users","text":""},{"location":"community/users/#who-uses-cxcli","title":"Who uses cxcli?","text":"<p>As the cxcli community grows, we'd like to keep a list of our users.</p> <p>Here's a running list of some organizations using cxcli<sup>1</sup>:</p> <ol> <li>Empty list, become the first one!</li> </ol> <p>Feel free to add yours!</p> <ol> <li> <p>Entries were either added by the companies themselves or by the maintainers after seeing it in the wild.\u00a0\u21a9</p> </li> </ol>"},{"location":"conversationprofiler/examples/","title":"Examples","text":""},{"location":"conversationprofiler/examples/#contains","title":"Contains","text":"<p>Simple example that demonstrates the Conversational Profiler in action using the contains validator. Find it here</p>"},{"location":"conversationprofiler/examples/#prompt","title":"Prompt","text":"<p>Example that shows how to use a prompt as an user input Dialogflow CX. Find it here</p>"},{"location":"conversationprofiler/examples/#string-similarity-algorithm","title":"String Similarity Algorithm","text":"<p>Full example using a string similarity algorithm to validate the agent's response. Find it here</p>"},{"location":"conversationprofiler/introduction/","title":"Conversation profiler","text":""},{"location":"conversationprofiler/introduction/#what-is-this","title":"What is this?","text":"<p>Use the Conversation Profiler to test user utterances and improve your agent's interaction model.</p> <p>With the Conversation Profiler, you can test the conversation flow of your agent. This means that you can send user's utterances to your agent and check if the agent is responding as expected (interactions). This feature is also useful when you have generative AI models in your agent, and you want to test if the agent is responding as expected. It is similar to the Dialogflow CX console's Test Agent feature, but with the Conversation Profiler, you can run your tests in your CI/CD pipelines and also it has additional features. Every suite is executed in the same Dialogflow CX session.</p> <p>All of the commands that are available in <code>cxcli</code> to execute the Conversation profiler are located within the <code>cxcli profile-conversation</code> subcommand.</p>"},{"location":"conversationprofiler/introduction/#reference","title":"Reference","text":"<p>It is important to know which suites and tests you can build. Because of that, you can find the entire reference on the Reference page. Suites and test are defined as <code>yaml</code> files.</p> <p>The <code>cxcli</code> has a command that allows you to run these suites from your terminal or from your CI pipelines.</p> <p>To execute a suite, you can run the <code>cxcli profile-conversation execute</code> command. For the usage, please refer to this page.</p>"},{"location":"conversationprofiler/introduction/#examples","title":"Examples","text":"<p>You can find some useful examples on our GitHub repo and the Examples page.</p>"},{"location":"conversationprofiler/introduction/#execution-example","title":"Execution Example","text":"<p>Here is a simple example of the <code>cxcli profile-conversation execute</code> command:</p> <pre><code>cxcli profile-conversation execute examples/profileconversation/suite.yaml\n</code></pre> <p>The above command will give you output similar to the following:</p> <pre><code>$ cxcli profile-conversation execute suite.yaml\n[INFO] Running suite: Example Conversation Profiler Suite\n[INFO][test-file:test_1][interaction:test_1_1][input:prompt] User&gt; Hello! (auto-generated from prompt: \"give me a one line hello\")\n[INFO][test-file:test_1][interaction:test_1_1][input:prompt] Agent&gt; Hi! How are you doing?\n[INFO][test-file:test_1][interaction:test_1_1][validation:equals] Validation with value \"hi\" \n[INFO][test-file:test_1][interaction:test_1_1][validation:equals] Validation configuration: {CaseSensitive:false}\n[INFO][test-file:test_1][interaction:test_1_2][input:text] User&gt; hi\n[INFO][test-file:test_1][interaction:test_1_2][input:text] Agent&gt; Hi! How are you doing?\n[INFO][test-file:test_1][interaction:test_1_2][validation:contains] Validation with value \"hi\" \n[INFO][test-file:test_1][interaction:test_1_2][validation:contains] Validation configuration: {CaseSensitive:false}\n[INFO][test-file:test_1][interaction:test_1_3][input:text] User&gt; hello\n[INFO][test-file:test_1][interaction:test_1_3][input:text] Agent&gt; Hi! How are you doing?\n[INFO][test-file:test_1][interaction:test_1_3][validation:equals] Validation with value \"hello\" \n[INFO][test-file:test_1][interaction:test_1_3][validation:equals] Validation configuration: {CaseSensitive:false}\n[INFO][test-file:test_1][interaction:test_1_4][input:text] User&gt; hi\n[INFO][test-file:test_1][interaction:test_1_4][input:text] Agent&gt; Hi! How are you doing?\n[INFO][test-file:test_1][interaction:test_1_4][validation:similarity] Validation with value \"hello\" \n[INFO][test-file:test_1][interaction:test_1_4][validation:similarity] Validation configuration: {CaseSensitive:false InsertCost:0 DeleteCost:0 ReplaceCost:0}\n</code></pre> <p>Are you running this command in a CI/CD pipeline?</p> <p>If this is the case, we recommend that you set the <code>--output-format</code> parameter to <code>json</code>.</p>"},{"location":"conversationprofiler/suites/","title":"Suites","text":""},{"location":"conversationprofiler/suites/#reference","title":"Reference","text":"<p>A suite is a yaml file with the following structure:</p> <pre><code># suite.yaml\n\n# Name of the suite.\nname: Example Suite\n# Brief description of the suite.\ndescription: Suite used as an example\n# Project ID on Google Cloud where is located your Dialogflow CX agent.\nprojectId: test-cx-346408\n# Location where your Dialogflow CX agent is running. \n# More info here: https://cloud.google.com/dialogflow/cx/docs/concept/region\nlocationId: us-central1\n# Agent name of your Dialogflow CX agent.\n# Notice: it is the agent name, not the agent ID.\nagentName: test-agent\n# You can have multiple tests defined in separated files\ntests:\n  # ID of the test.\n  - id: test_id\n    # File where the test specification is located\n    file: ./test.yaml\n</code></pre> <p>It has the same structure as the NLU Profiler suite.</p>"},{"location":"conversationprofiler/suites/#json-schema","title":"JSON Schema","text":"<p><code>cxcli</code> also has a jsonschema file, which you can use to have better editor support:</p> <pre><code>https://cxcli.xavidop.me/static/conversationsuite.json\n</code></pre> <p>You can also specify it in your <code>yml</code> config files by adding a comment like the following: <pre><code># yaml-language-server: $schema=https://cxcli.xavidop.me/static/conversationsuite.json\n</code></pre></p>"},{"location":"conversationprofiler/tests/","title":"Tests","text":""},{"location":"conversationprofiler/tests/#reference","title":"Reference","text":"<p>A test is a yaml file with the following structure:</p> <pre><code># test.yaml\n\n# Name of the test.\nname: Example test\n# Brief description of the test.\ndescription: These are some tests\n# Locale of the interaction model that is gonna be tested.\n# You can find the locales here: https://cloud.google.com/dialogflow/cx/docs/reference/language\nlocaleId: en\n# A interactions is the test itself: given an input, you will validate the agent response returned by Dialogflow CX\n# You can have multiple interactions defined\ninteractions:\n  # The ID of the interactions\n  - id: test_1\n    user:\n      # the input type\n      # it could be text, audio or prompt\n      type: text\n      # The input itself in text format. For type: audio, you have to specify the audio file.\n      text: I want 3 pizzas\n    agent:\n      validate:\n        # String validation to check if the response returned by Dialogflow CX is correct\n        - type: contains\n          value: pizza\n\n  - id: test_2\n    user: \n      type: text\n      text: hi\n    agent:\n      # example with a string similarity validation\n      validate:\n        - type: similarity\n          algorithm: levenshtein\n          threshold: 0.4\n          value: hello\n          configuration-levenshtein:\n            casesensitive: false\n\n  - id: test_3\n    user: \n      type: audio\n      audio: ./audio/hi.mp3\n    agent:\n      # example with a regexp validation\n      validate:\n        - type: regexp\n          value: '/my-regex/'\n</code></pre>"},{"location":"conversationprofiler/tests/#input-types","title":"Input types","text":""},{"location":"conversationprofiler/tests/#text-input","title":"Text input","text":"<p>The input text is the simplest one. You just have to specify the text you want to send to Dialogflow CX. Make sure that the text is in the language you specified in the <code>localeId</code> field. to use this type you have to set the <code>type</code> field to <code>text</code> and the <code>text</code> field to the text you want to send.</p>"},{"location":"conversationprofiler/tests/#audio-input","title":"Audio input","text":"<p>The audio input is a little bit more complex. You have to specify the path to the audio file you want to send to Dialogflow CX. Make sure that the audio file is in the language you specified in the <code>localeId</code> field. To use this type you have to set the <code>type</code> field to <code>audio</code> and the <code>file</code> field to the path to the audio file.</p> <p>It is important to know that the input audio needs to have the following format:</p> <ol> <li>A sample rate of 16000 Hertz</li> <li>The audio encoding has to be Linear16. Linear16 is a 16-bit linear pulse-code modulation (PCM) encoding.</li> </ol> <p>If you don't have a file with this format, you can create it by yourself using the <code>cxcli tts</code> command! All the information is located here</p>"},{"location":"conversationprofiler/tests/#prompt-input","title":"Prompt input","text":"<p>The prompt input is the most complex one. You have to specify the input prompt you want to send to Dialogflow CX. To use this type you have to set the <code>type</code> field to <code>prompt</code> and the <code>prompt</code> field to the prompt you want to send.</p> <p>It is important to know that the input prompt needs Vertex AI API to be enabled in your project and the proper permissions granted.  You can find more information on the Authentication page.</p>"},{"location":"conversationprofiler/tests/#validation-types","title":"Validation types","text":""},{"location":"conversationprofiler/tests/#contains","title":"Contains","text":"<p>The contains validation type is the simplest one. It just checks if the response returned by the Dialogflow CX agent contains the value specified in the <code>value</code> field. To use this type you have to set the <code>type</code> field to <code>contains</code> and the <code>value</code> field to the value you want to check:</p> <pre><code>validate:\n  # String validation to check if the response returned by Dialogflow CX is correct\n  - type: contains\n    value: pizza\n</code></pre> <p>The <code>contains</code> validation has its own options:</p> <pre><code>validate:\n  # String validation to check if the response returned by Dialogflow CX is correct\n  - type: contains\n    value: pizza\n    configuration-contains:\n      casesensitive: true\n</code></pre> <p>If you set the <code>casesensitive</code> field to <code>true</code>, the validation will be case sensitive. By default, it is set to <code>false</code>.</p>"},{"location":"conversationprofiler/tests/#equals","title":"Equals","text":"<p>The equals validation type is a little bit more complex. It checks if the response returned by the Dialogflow CX agent is equal to the value specified in the <code>value</code> field. To use this type you have to set the <code>type</code> field to <code>equals</code> and the <code>value</code> field to the value you want to check:</p> <pre><code>validate:\n  # String validation to check if the response returned by Dialogflow CX is correct\n  - type: equals\n    value: Here you have 3 pizzas\n</code></pre> <p>The <code>equals</code> validation has its own options:</p> <pre><code>validate:\n  # String validation to check if the response returned by Dialogflow CX is correct\n  - type: equals\n    value: Here you have 3 pizzas\n    configuration-equals:\n      casesensitive: true\n</code></pre> <p>If you set the <code>casesensitive</code> field to <code>true</code>, the validation will be case sensitive. By default, it is set to <code>false</code>.</p>"},{"location":"conversationprofiler/tests/#regexp","title":"Regexp","text":"<p>The regexp validation type is the most complex one. It checks if the response returned by the Dialogflow CX agent matches the regexp specified in the <code>value</code> field. To use this type you have to set the <code>type</code> field to <code>regexp</code> and the <code>value</code> field to the regular expression you want to check:</p> <pre><code>validate:\n  # String validation to check if the response returned by Dialogflow CX is correct\n  - type: regexp\n    value: '/Here you have \\d pizzas/'\n</code></pre> <p>The <code>regexp</code> validation has its own options:</p> <pre><code>validate:\n  # String validation to check if the response returned by Dialogflow CX is correct\n  - type: regexp\n    value: '/Here you have \\d pizzas/'\n    configuration-regexp:\n      findinsubmatches: true\n</code></pre> <p>If you set the <code>findinsubmatches</code> field to <code>true</code>, the validation will check if the regexp matches any of the submatches. By default, it is set to <code>false</code>.</p>"},{"location":"conversationprofiler/tests/#string-similarity-algorithms","title":"String Similarity Algorithms","text":"<p>The string similarity validation type is the most complex one. It checks if the response returned by the Dialogflow CX agent is similar to the value specified in the <code>value</code> field using a <code>threshold</code> to check if the similarity is enough. To use this type you have to set the <code>type</code> field to <code>similarity</code> and the <code>algorithm</code> field to the algorithm you want to use and the <code>value</code> field to the value you want to check and the <code>threshold</code> field to the threshold you want to use. The available algorithms are:</p> <ol> <li><code>levenshtein</code>: The Levenshtein distance is a string metric for measuring the difference between two sequences. Informally, the Levenshtein distance between two words is the minimum number of single-character edits (insertions, deletions or substitutions) required to change one word into the other.</li> <li><code>jaro</code>: The Jaro distance is a measure of similarity between two strings. The higher the Jaro distance for two strings is, the more similar the strings are. The score is normalized such that 0 equates to no similarity and 1 is an exact match.</li> <li><code>jaro-winkler</code>: The Jaro\u2013Winkler distance is a string metric for measuring the edit distance between two sequences. Informally, the Jaro\u2013Winkler distance is the edit distance between two strings with the twist that higher scores are returned for strings that match from the beginning for a set prefix length.</li> <li><code>smith-waterman-gotoh</code>: The Smith\u2013Waterman algorithm performs local sequence alignment; that is, for determining similar regions between two strings of nucleic acid sequences or protein sequences. Instead of looking at the entire sequence, the Smith\u2013Waterman algorithm compares segments of all possible lengths and optimizes the similarity measure.</li> <li><code>sorensen-dice</code>: The Dice distance is a measure of similarity between two strings. The higher the Dice distance for two strings is, the more similar the strings are. The score is normalized such that 0 equates to no similarity and 1 is an exact match.</li> <li><code>jaccard</code>: The Jaccard distance is a measure of similarity between two strings. The higher the Jaccard distance for two strings is, the more similar the strings are. The score is normalized such that 0 equates to no similarity and 1 is an exact match.</li> <li><code>overlap-coefficient</code>: The Overlap distance (or Szymkiewicz-Simpson distance) is a measure of similarity between two strings. The higher the Overlap distance for two strings is, the more similar the strings are. The score is normalized such that 0 equates to no similarity and 1 is an exact match.</li> <li><code>hamming</code>: The Hamming measures the minimum number of substitutions required to change one string into the other, or equivalently, the minimum number of errors that could have transformed one string into the other. The higher the Hamming distance for two strings is, the more similar the strings are. The score is normalized such that 0 equates to no similarity and 1 is an exact match.</li> </ol>"},{"location":"conversationprofiler/tests/#levenshtein","title":"Levenshtein","text":"<p>The <code>levenshtein</code> algorithm has the following configuration:</p> <pre><code>validate:\n  # String validation to check if the response returned by Dialogflow CX is correct\n  - type: similarity\n    algorithm: levenshtein\n    value: hello\n    threshold: 0.4\n</code></pre> <p>The options are: <pre><code>validate:\n  # String validation to check if the response returned by Dialogflow CX is correct\n  - type: similarity\n    algorithm: levenshtein\n    value: hello\n    threshold: 0.4\n    configuration-levenshtein:\n      casesensitive: true\n      insertcost: 1\n      deletecost: 1\n      replacecost: 1\n</code></pre> Let's explain each one of them:</p> <ol> <li>The <code>casesensitive</code> field is used to check if the algorithm is case sensitive. By default, it is set to <code>true</code>.</li> <li>the <code>insertcost</code> field is used to set the cost of an insert operation. By default, it is set to <code>1</code>.</li> <li>the <code>deletecost</code> field is used to set the cost of a delete operation. By default, it is set to <code>1</code>.</li> <li>the <code>replacecost</code> field is used to set the cost of a replace operation. By default, it is set to <code>1</code>.</li> </ol>"},{"location":"conversationprofiler/tests/#jaro","title":"Jaro","text":"<p>The <code>Jaro</code> algorithm has the following configuration:</p> <pre><code>validate:\n  # String validation to check if the response returned by Dialogflow CX is correct\n  - type: similarity\n    algorithm: jaro\n    value: hello\n    threshold: 0.4\n</code></pre> <p>The options are: <pre><code>validate:\n  # String validation to check if the response returned by Dialogflow CX is correct\n  - type: similarity\n    algorithm: jaro\n    value: hello\n    threshold: 0.4\n    configuration-jaro:\n      casesensitive: true\n</code></pre></p> <p>The <code>casesensitive</code> field is used to check if the algorithm is case sensitive. By default, it is set to <code>true</code>.</p>"},{"location":"conversationprofiler/tests/#jaro-winkler","title":"Jaro-Winkler","text":"<p>The <code>Jaro-Winkler</code> algorithm has the following configuration:</p> <pre><code>validate:\n  # String validation to check if the response returned by Dialogflow CX is correct\n  - type: similarity\n    algorithm: jaro-winkler\n    value: hello\n    threshold: 0.4\n</code></pre> <p>The options are: <pre><code>validate:\n  # String validation to check if the response returned by Dialogflow CX is correct\n  - type: similarity\n    algorithm: jaro-winkler\n    value: hello\n    threshold: 0.4\n    configuration-jaro-winkler:\n      casesensitive: true\n</code></pre></p> <p>The <code>casesensitive</code> field is used to check if the algorithm is case sensitive. By default, it is set to <code>true</code>.</p>"},{"location":"conversationprofiler/tests/#smith-waterman-gotoh","title":"Smith-Waterman-Gotoh","text":"<p>The <code>Smith-Waterman-Gotoh</code> algorithm has the following configuration:</p> <pre><code>validate:\n  # String validation to check if the response returned by Dialogflow CX is correct\n  - type: similarity\n    algorithm: smith-waterman-gotoh\n    value: hello\n    threshold: 0.4\n</code></pre> <p>The options are: <pre><code>validate:\n  # String validation to check if the response returned by Dialogflow CX is correct\n  - type: similarity\n    algorithm: smith-waterman-gotoh\n    value: hello\n    threshold: 0.4\n    configuration-smith-waterman-gotoh:\n      casesensitive: true\n      gappenalty: -0.5\n</code></pre></p> <p>Let's explain each one of them:</p> <ol> <li>The <code>casesensitive</code> field is used to check if the algorithm is case sensitive. By default, it is set to <code>true</code>.</li> <li>the <code>gappenalty</code> defines a score penalty for character insertions or deletions. For relevant results, the gap penalty should be a non-positive number. By default, it is set to <code>-0.5</code>.</li> </ol>"},{"location":"conversationprofiler/tests/#sorensen-dice","title":"Sorensen-Dice","text":"<p>The <code>Sorensen-Dice</code> algorithm has the following configuration:</p> <pre><code>validate:\n  # String validation to check if the response returned by Dialogflow CX is correct\n  - type: similarity\n    algorithm: sorensen-dice\n    value: hello\n    threshold: 0.4\n</code></pre> <p>The options are: <pre><code>validate:\n  # String validation to check if the response returned by Dialogflow CX is correct\n  - type: similarity\n    algorithm: sorensen-dice\n    value: hello\n    threshold: 0.4\n    configuration-sorensen-dice:\n      casesensitive: true\n      NgramSize: 2\n</code></pre></p> <p>Let's explain each one of them:</p> <ol> <li>The <code>casesensitive</code> field is used to check if the algorithm is case sensitive. By default, it is set to <code>true</code>.</li> <li>The <code>NgramSize</code> represents the size (in characters) of the tokens generated when comparing the input sequences. By default, it is set to <code>2</code>.</li> </ol>"},{"location":"conversationprofiler/tests/#jaccard","title":"Jaccard","text":"<p>The <code>Jaccard</code> algorithm has the following configuration:</p> <pre><code>validate:\n  # String validation to check if the response returned by Dialogflow CX is correct\n  - type: similarity\n    algorithm: jaccard\n    value: hello\n    threshold: 0.4\n</code></pre> <p>The options are: <pre><code>validate:\n  # String validation to check if the response returned by Dialogflow CX is correct\n  - type: similarity\n    algorithm: jaccard\n    value: hello\n    threshold: 0.4\n    configuration-jaccard:\n      casesensitive: true\n      NgramSize: 2\n</code></pre></p> <p>Let's explain each one of them:</p> <ol> <li>The <code>casesensitive</code> field is used to check if the algorithm is case sensitive. By default, it is set to <code>true</code>.</li> <li>The <code>NgramSize</code> represents the size (in characters) of the tokens generated when comparing the input sequences. By default, it is set to <code>2</code>.</li> </ol>"},{"location":"conversationprofiler/tests/#overlap-coefficient","title":"Overlap Coefficient","text":"<p>The <code>Overlap Coefficient</code> algorithm has the following configuration:</p> <pre><code>validate:\n  # String validation to check if the response returned by Dialogflow CX is correct\n  - type: similarity\n    algorithm: overlap-coefficient\n    value: hello\n    threshold: 0.4\n</code></pre> <p>The options are: <pre><code>validate:\n  # String validation to check if the response returned by Dialogflow CX is correct\n  - type: similarity\n    algorithm: overlap-coefficient\n    value: hello\n    threshold: 0.4\n    configuration-overlap-coefficient:\n      casesensitive: true\n      NgramSize: 2\n</code></pre></p> <p>Let's explain each one of them:</p> <ol> <li>The <code>casesensitive</code> field is used to check if the algorithm is case sensitive. By default, it is set to <code>true</code>.</li> <li>The <code>NgramSize</code> represents the size (in characters) of the tokens generated when comparing the input sequences. By default, it is set to <code>2</code>.</li> </ol>"},{"location":"conversationprofiler/tests/#hamming","title":"Hamming","text":"<p>The <code>Hamming</code> algorithm has the following configuration:</p> <pre><code>validate:\n  # String validation to check if the response returned by Dialogflow CX is correct\n  - type: similarity\n    algorithm: hamming\n    value: hello\n    threshold: 0.4\n</code></pre> <p>The options are: <pre><code>validate:\n  # String validation to check if the response returned by Dialogflow CX is correct\n  - type: similarity\n    algorithm: hamming\n    value: hello\n    threshold: 0.4\n    configuration-hamming:\n      casesensitive: true\n</code></pre></p> <p>The <code>casesensitive</code> field is used to check if the algorithm is case sensitive. By default, it is set to <code>true</code>.</p>"},{"location":"conversationprofiler/tests/#json-schema","title":"JSON Schema","text":"<p><code>cxcli</code> also has a jsonschema file, which you can use to have better editor support:</p> <pre><code>https://cxcli.xavidop.me/static/conversationtest.json\n</code></pre> <p>You can also specify it in your <code>yml</code> config files by adding a comment like the following: <pre><code># yaml-language-server: $schema=https://cxcli.xavidop.me/static/conversationtest.json\n</code></pre></p>"},{"location":"conversationprofiler/examples/contains/","title":"Audio input","text":""},{"location":"conversationprofiler/examples/contains/#suite-file","title":"Suite file","text":"<pre><code># suite.yaml\n\nname: Example Suite\ndescription: Suite used as an example\nprojectId: test-cx-346408\nlocationId: us-central1\nagentName: test-agent\ntests:\n  - id: test_id\n    file: ./test.yaml\n</code></pre>"},{"location":"conversationprofiler/examples/contains/#test-file","title":"Test file","text":"<pre><code># test.yaml\n\nname: Example test\ndescription: These are some tests\nlocaleId: en\ninteractions:\n  - id: test_1\n    user: \n      type: text\n      text: hi\n    agent:\n      validate:\n        - type: contains\n          value: hello\n</code></pre> <p>You can download the audio file used in this example here</p>"},{"location":"conversationprofiler/examples/prompt/","title":"Prompt example","text":""},{"location":"conversationprofiler/examples/prompt/#suite-file","title":"Suite file","text":"<pre><code># suite.yaml\n\nname: Example Suite\ndescription: Suite used as an example\nprojectId: test-cx-346408\nlocationId: us-central1\nagentName: test-agent\ntests:\n  - id: test_id\n    file: ./test.yaml\n</code></pre>"},{"location":"conversationprofiler/examples/prompt/#test-file","title":"Test file","text":"<pre><code># test.yaml\n\nname: Example test\ndescription: These are some tests\nlocaleId: en\ninteractions:\n  - id: test_1_1\n    user: \n      type: prompt\n      prompt: give me a one line hello\n    agent:\n      validate:\n        - type: equals\n          value: hello\n</code></pre>"},{"location":"conversationprofiler/examples/similarity/","title":"System entity detection example","text":""},{"location":"conversationprofiler/examples/similarity/#suite-file","title":"Suite file","text":"<pre><code># suite.yaml\n\nname: Example Suite\ndescription: Suite used as an example\nprojectId: test-cx-346408\nlocationId: us-central1\nagentName: test-agent\ntests:\n  - id: test_id\n    file: ./test.yaml\n</code></pre>"},{"location":"conversationprofiler/examples/similarity/#test-file","title":"Test file","text":"<pre><code># test.yaml\n\nname: Example test\ndescription: These are some tests\nlocaleId: en\ninteractions:\n  - id: test_1_4\n    user: \n      type: text\n      text: hi\n    agent:\n      validate:\n        - type: similarity\n          algorithm: levenshtein\n          value: hello\n          threshold: 0.4\n          configuration-levenshtein:\n            casesensitive: false\n</code></pre>"},{"location":"entitytypes/create/","title":"Create","text":""},{"location":"entitytypes/create/#usage","title":"Usage","text":"<p>You can find the create functionality within the <code>cxcli entity-type create</code> subcommand. You can read the documentation about this command here.</p> <p>The argument to <code>--entities</code> is a list of the entities with their synonyms, comma separated. This parameter has the following format: <pre><code>entity1@synonym1|synonym2,entity2@synonym1|synonym2\n</code></pre></p> <p>An example entity type with synonyms: <code>pikachu@25|pika,charmander@3</code></p>"},{"location":"entitytypes/create/#example","title":"Example","text":"<p>Here is a simple example of the <code>cxcli entity-type create</code> command:</p> <pre><code>cxcli entity-type create pokemon --entities \"pikachu@25|pika,charmander@3\" --agent-name test-agent --project-id test-cx-346408 --location-id us-central1\n</code></pre> <p>The above command will give you output similar to the following:</p> <pre><code>$ cxcli entity-type create pokemon --entities \"pikachu@25|pika,charmander@3\" --agent-name test-agent --project-id test-cx-346408 --location-id us-central1\nINFO Entity Type created with id: projects/test-cx-346408/locations/us-central1/agents/40278ea0-c0fc-4d9a-a4d4-caa68d86295f/entityTypes/457a451d-f5ce-47da-b8dc-16b17d874a5d\n</code></pre>"},{"location":"entitytypes/create/#useful-links","title":"Useful Links","text":"<p>If you want to learn more about Dialogflow CX entity types creation, refer to the official documentation.</p>"},{"location":"entitytypes/delete/","title":"Delete","text":""},{"location":"entitytypes/delete/#usage","title":"Usage","text":"<p>You can find the delete functionality within the <code>cxcli entity-type delete</code> subcommand. You can read the documentation about this command here.</p>"},{"location":"entitytypes/delete/#example","title":"Example","text":"<p>Here is a simple example of the <code>cxcli entity-type delete</code> command:</p> <pre><code>cxcli entity-type delete pokemon2  --agent-name test-agent --project-id test-cx-346408 --location-id us-central1\n</code></pre> <p>The above command will give you output similar to the following:</p> <pre><code>$ cxcli entity-type delete pokemon2  --agent-name test-agent --project-id test-cx-346408 --location-id us-central1\nINFO Entity Type deleted\n</code></pre>"},{"location":"entitytypes/delete/#useful-links","title":"Useful Links","text":"<p>If you want to learn more about Dialogflow CX entity types deletion, refer to the official documentation.</p>"},{"location":"entitytypes/introduction/","title":"Entity types","text":""},{"location":"entitytypes/introduction/#what-is-this","title":"What is this?","text":"<p>One of the most important aspects of natural language understanding is entity types or entities. Entities contain the important factors within a message such as names, dates, products, organizations, places, or anything that we want to extract from the message. We call this concept \u201centities\u201d. For example, let's take a look at the <code>order_intent</code> intent:</p> <ol> <li>I want a pizza</li> <li>I want 3 cokes</li> <li>Give me two burgers</li> </ol> <p>As you can see in the example above, we can extract two entity Types: <code>quantity</code> and <code>order_type</code>. We can represent the entities within the above utterances as:</p> <ol> <li>I want <code>{quantity}</code> <code>{order_type}</code></li> <li>Give me <code>{quantity}</code> <code>{order_type}</code></li> </ol> <p>We can also think of entity types as variables.</p> <p>With <code>cxcli</code>, you can easily interact with your Dialogflow CX entity types.</p> <p>All of the commands that you have available in <code>cxcli</code> to interact with your entity types are located within the <code>cxcli entity-type</code> subcommand.</p>"},{"location":"entitytypes/introduction/#create","title":"Create","text":"<p>The <code>cxcli</code> has a command that allows you to create an entity type. You can find a more detailed information here.</p>"},{"location":"entitytypes/introduction/#update","title":"Update","text":"<p>The <code>cxcli</code> has a command that allows you to update an entity type. You can find a more detailed information here.</p>"},{"location":"entitytypes/introduction/#delete","title":"Delete","text":"<p>The <code>cxcli</code> has a command that allows you to delete your entity type. You can find a more detailed explanation here.</p>"},{"location":"entitytypes/introduction/#useful-links","title":"Useful Links","text":"<p>If you want to see the full usage of the <code>cxcli entity-type</code> command, please refer to this page.</p> <p>If you want to learn more about Dialogflow CX entity types, refer to the official documentation.</p>"},{"location":"entitytypes/update/","title":"Update","text":""},{"location":"entitytypes/update/#usage","title":"Usage","text":"<p>You can find the update functionality within the <code>cxcli entity-type update</code> subcommand. You can read the documentation about this command here.</p> <p>The argument to <code>--entities</code> is a list of the entities with their synonyms, comma separated. This parameter has the following format: <pre><code>entity1@synonym1|synonym2,entity2@synonym1|synonym2\n</code></pre></p> <p>An example entity type with synonyms: <code>pikachu@25|pika,charmander@3</code></p>"},{"location":"entitytypes/update/#example","title":"Example","text":"<p>Here is a simple example of the <code>cxcli entity-type update</code> command:</p> <pre><code>cxcli entity-type update pokemon --entities \"pikachu@25|pika,charmander@3\" --agent-name test-agent --project-id test-cx-346408 --location-id us-central1\n</code></pre> <p>The above command will give you output similar to the following:</p> <pre><code>$ cxcli entity-type update pokemon --entities \"pikachu@25|pika,charmander@3\" --agent-name test-agent --project-id test-cx-346408 --location-id us-central1\nINFO Entity Type updated\n</code></pre>"},{"location":"entitytypes/update/#useful-links","title":"Useful Links","text":"<p>If you want to learn more about Dialogflow CX entity types update, refer to the official documentation.</p>"},{"location":"environments/cicd/","title":"Environments CI/CD","text":""},{"location":"environments/cicd/#usage","title":"Usage","text":"<p>You can find the CI/CD functionality within the <code>cxcli environment execute-cicd</code> subcommand. You can read the documentation about this command here.</p>"},{"location":"environments/cicd/#example","title":"Example","text":"<p>Here is a simple example of the <code>cxcli environment execute-cicd</code> command:</p> <pre><code>cxcli environment execute-cicd cicd-env --project-id test-cx-346408 --location-id us-central1 --agent-name test-agent\n</code></pre> <p>The above command will give you output similar to the following:</p> <pre><code>$ cxcli environment execute-cicd cicd-env --project-id test-cx-346408 --location-id us-central1 --agent-name test-agent\nINFO Executing cicd for environment cicd-env\nINFO PASSED\n</code></pre> <p>Are you running this command in a CI/CD pipeline?</p> <p>If this is the case, we recommend that you set the <code>--output-format</code> parameter to <code>json</code>.</p>"},{"location":"environments/cicd/#useful-links","title":"Useful Links","text":"<p>If you want to learn more about Dialogflow CX CI/CD execution, refer to the official documentation.</p>"},{"location":"environments/create/","title":"Create","text":""},{"location":"environments/create/#usage","title":"Usage","text":"<p>You can find the create functionality within the <code>cxcli environment create</code> subcommand. You can read the documentation about this command here.</p> <p>The <code>--flow-versions</code> parameter is a list of flows and their versions to include in the environment, comma separated. For each <code>flow</code> used in this environment, it is required to add the <code>version</code> with this format: <code>@flow-version</code>. This is the full format:</p> <pre><code>flow@flow-version\n</code></pre> <p>An example of flows with their versions:</p> <pre><code>Default Start Flow@production_v2,Test Flow@v1.0.0\n</code></pre>"},{"location":"environments/create/#example","title":"Example","text":"<p>Here is a simple example of using the <code>cxcli environment create</code> command:</p> <pre><code>cxcli environment create my-env --flow-versions \"Default Start Flow@production_v2,Test Flow@v1.0.0\"  --agent-name test-agent --project-id test-cx-346408 --location-id us-central1\n</code></pre> <p>The above command will give you output similar to the following:</p> <pre><code>$ cxcli environment create my-env --flow-versions \"Default Start Flow@production_v2,Test Flow@v1.0.0\"  --agent-name test-agent --project-id test-cx-346408 --location-id us-central1\nINFO Environment created with id: projects/test-cx-346408/locations/us-central1/agents/40278ea0-c0fc-4d9a-a4d4-caa68d86295f/environments/9f9cf42a-9033-4d73-9407-613d041c9403\n</code></pre>"},{"location":"environments/create/#useful-links","title":"Useful Links","text":"<p>If you want to learn more about Dialogflow CX environment creation, refer to the official documentation.</p>"},{"location":"environments/delete/","title":"Delete","text":""},{"location":"environments/delete/#usage","title":"Usage","text":"<p>You can find the delete functionality within the <code>cxcli environment delete</code> subcommand. You can read the documentation about this command here.</p>"},{"location":"environments/delete/#example","title":"Example","text":"<p>Here is a simple example of the <code>cxcli environment delete</code> command:</p> <pre><code>cxcli environment delete my-env --agent-name test-agent --project-id test-cx-346408 --location-id us-central1\n</code></pre> <p>The above command will give you output similar to the following:</p> <pre><code>$ cxcli environment delete my-env --agent-name test-agent --project-id test-cx-346408 --location-id us-central1\nINFO Environment deleted\n</code></pre>"},{"location":"environments/delete/#useful-links","title":"Useful Links","text":"<p>If you want to learn more about Dialogflow CX environment deletion, refer to the official documentation.</p>"},{"location":"environments/introduction/","title":"Environments","text":""},{"location":"environments/introduction/#what-is-this","title":"What is this?","text":"<p>In software, it is a common pattern (and a best practice) to have different environments where developers can deploy different versions of their software. Each environment has its own configuration.</p> <p>Dialogflow CX follows the same concept in that you can create a version of your agent and then deploy it to a specific environment. This is also similar to a webhook in that you can deploy a specific webhook version and use that version within an environment.</p> <p>With <code>cxcli</code>, you can easily interact with the environments of your Dialogflow CX agents.</p> <p>All of the commands that you have available in <code>cxcli</code> to interact with your environments are located within the <code>cxcli environment</code> subcommand.</p>"},{"location":"environments/introduction/#create","title":"Create","text":"<p>The <code>cxcli</code> has a command that allows you to create an environment. You can find a more detailed information here.</p>"},{"location":"environments/introduction/#update","title":"Update","text":"<p>The <code>cxcli</code> has a command that allows you to update an environment. You can find a more detailed information here.</p>"},{"location":"environments/introduction/#delete","title":"Delete","text":"<p>The <code>cxcli</code> has a command that allows you to delete your environment. You can find a more detailed explanation here.</p>"},{"location":"environments/introduction/#cicd","title":"CI/CD","text":"<p>In Dialogflow CX, when you are testing your agents, you can save those tests and associate them with a specific environment.</p> <p>The <code>cxcli</code> tool has a command that allows you to run these CI/CD pipelines from your terminal or from your CI processes. You can find a more detailed explanation here.</p>"},{"location":"environments/introduction/#useful-links","title":"Useful Links","text":"<p>If you want to see the full usage of the <code>cxcli environment</code> command, please refer to this page.</p> <p>If you want to learn more about Dialogflow CX environments, refer to the official documentation.</p>"},{"location":"environments/update/","title":"Update","text":""},{"location":"environments/update/#usage","title":"Usage","text":"<p>You can find the update functionality within the <code>cxcli environment update</code> subcommand. You can read the documentation about this command here.</p> <p>The <code>--flow-versions</code> parameter is a list of flows and their versions to include in the environment, comma separated. For each <code>flow</code> used in this environment, it is required to add the <code>version</code> with this format: <code>@flow-version</code>. This is the full format:</p> <pre><code>flow@flow-version\n</code></pre> <p>An example of flows with their versions:</p> <pre><code>Default Start Flow@production_v2,Test Flow@v1.0.0\n</code></pre>"},{"location":"environments/update/#example","title":"Example","text":"<p>Here is a simple example of the <code>cxcli entity-type update</code> command:</p> <pre><code>cxcli environment update my-env --flow-versions \"Default Start Flow@production_v3,Test Flow@v1.1.0\"  --agent-name test-agent --project-id test-cx-346408 --location-id us-central1 --description \"This is a test environment\"\n</code></pre> <p>The above command will give you output similar to the following:</p> <pre><code>$ cxcli environment update my-env --flow-versions \"Default Start Flow@production_v3,Test Flow@v1.1.0\"  --agent-name test-agent --project-id test-cx-346408 --location-id us-central1 --description \"This is a test environment\"\nINFO Environment updated\n</code></pre>"},{"location":"environments/update/#useful-links","title":"Useful Links","text":"<p>If you want to learn more about Dialogflow CX environment update, refer to the official documentation.</p>"},{"location":"flows/create/","title":"Create","text":""},{"location":"flows/create/#usage","title":"Usage","text":"<p>You can find the create functionality within the <code>cxcli flow create</code> subcommand. You can read the documentation about this command here.</p>"},{"location":"flows/create/#example","title":"Example","text":"<p>Here is a simple example of using the <code>cxcli flow create</code> command:</p> <pre><code>cxcli flow create my-flow --agent-name test-agent --project-id test-cx-346408 --location-id us-central1 --description \"My test flow\"\n</code></pre> <p>The above command will give you output similar to the following:</p> <pre><code>$ cxcli flow create my-flow --agent-name test-agent --project-id test-cx-346408 --location-id us-central1 --description \"My test flow\"\nINFO Flow created with id: projects/test-cx-346408/locations/us-central1/agents/40278ea0-c0fc-4d9a-a4d4-caa68d86295f/flows/49a38c72-2a63-4d71-a266-2d722eb8360e\n</code></pre>"},{"location":"flows/create/#useful-links","title":"Useful Links","text":"<p>If you want to learn more about Dialogflow CX flow creation, refer to the official documentation.</p>"},{"location":"flows/delete/","title":"Delete","text":""},{"location":"flows/delete/#usage","title":"Usage","text":"<p>You can find the delete functionality within the <code>cxcli flow delete</code> subcommand. You can read the documentation about this command here.</p>"},{"location":"flows/delete/#example","title":"Example","text":"<p>Here is a simple example of the <code>cxcli flow delete</code> command:</p> <pre><code>cxcli flow delete my-flow --agent-name test-agent --project-id test-cx-346408 --location-id us-central1\n</code></pre> <p>The above command will give you output similar to the following:</p> <pre><code>$ cxcli flow delete my-flow --agent-name test-agent --project-id test-cx-346408 --location-id us-central1\nINFO Flow deleted\n</code></pre>"},{"location":"flows/delete/#useful-links","title":"Useful Links","text":"<p>If you want to learn more about Dialogflow CX flow deletion, refer to the official documentation.</p>"},{"location":"flows/introduction/","title":"Flows","text":""},{"location":"flows/introduction/#what-is-this","title":"What is this?","text":"<p>In intricate conversations, various topics come into play. Take, for example, a flight book service, where a dialogue may cover areas like seat booking a meal reservation, obtaining customer information, and confirming the booking. Each of these topics requires multiple interactions between the agent and the end-user to gather the necessary information.</p> <p>Flows are employed to delineate these topics and their respective conversational paths. Each agent is equipped with a default start flow, which serves as a foundation for simple agents.</p> <p>With <code>cxcli</code>, you can easily interact with the flows of your Dialogflow CX agents.</p> <p>All of the commands that you have available in <code>cxcli</code> to interact with your flows are located within the <code>cxcli flow</code> subcommand.</p>"},{"location":"flows/introduction/#create","title":"Create","text":"<p>The <code>cxcli</code> has a command that allows you to create a flow. You can find a more detailed information here.</p>"},{"location":"flows/introduction/#update","title":"Update","text":"<p>The <code>cxcli</code> has a command that allows you to update a flow. You can find a more detailed information here.</p>"},{"location":"flows/introduction/#delete","title":"Delete","text":"<p>The <code>cxcli</code> has a command that allows you to delete your flow. You can find a more detailed explanation here.</p>"},{"location":"flows/introduction/#train","title":"Train","text":"<p>In Dialogflow CX, when you are adding training phrases to your intents and synonyms to your entity types, you will need to train your agent in order to have the latest changes ready for your end-users.</p> <p>The <code>cxcli</code> tool has a command that allows you train your flow from your terminal or from your CI processes. You can find a more detailed explanation here.</p>"},{"location":"flows/introduction/#useful-links","title":"Useful Links","text":"<p>If you want to see the full usage of the <code>cxcli flow</code> command, please refer to this page.</p> <p>If you want to learn more about Dialogflow CX flows, refer to the official documentation.</p>"},{"location":"flows/train/","title":"Train","text":""},{"location":"flows/train/#usage","title":"Usage","text":"<p>You can find the train functionality within the <code>cxcli flow train</code> subcommand. You can read the documentation about this command here.</p>"},{"location":"flows/train/#example","title":"Example","text":"<p>Here is a simple example of the <code>cxcli flow train</code> command:</p> <pre><code>cxcli flow train my-flow --project-id test-cx-346408 --location-id us-central1 --agent-name test-agent\n</code></pre> <p>The above command will give you output similar to the following:</p> <pre><code>$ cxcli flow train my-flow --project-id test-cx-346408 --location-id us-central1 --agent-name test-agent\nINFO Flow trained\n</code></pre> <p>Is it taking longer than expected?</p> <p>That is okay, depending on the amount of data to train it takes longer.</p>"},{"location":"flows/train/#useful-links","title":"Useful Links","text":"<p>If you want to learn more about Dialogflow CX flow train execution, refer to the official documentation.</p>"},{"location":"flows/update/","title":"Update","text":""},{"location":"flows/update/#usage","title":"Usage","text":"<p>You can find the update functionality within the <code>cxcli flow update</code> subcommand. You can read the documentation about this command here.</p>"},{"location":"flows/update/#example","title":"Example","text":"<p>Here is a simple example of the <code>cxcli flow update</code> command:</p> <pre><code>cxcli flow update my-flow --agent-name test-agent --project-id test-cx-346408 --location-id us-central1 --description \"My updated test flow\"\n</code></pre> <p>The above command will give you output similar to the following:</p> <pre><code>$ cxcli flow update my-flow --agent-name test-agent --project-id test-cx-346408 --location-id us-central1 --description \"My updated test flow\"\nINFO Flow updated\n</code></pre>"},{"location":"flows/update/#useful-links","title":"Useful Links","text":"<p>If you want to learn more about Dialogflow CX flow update, refer to the official documentation.</p>"},{"location":"flowversions/create/","title":"Create","text":""},{"location":"flowversions/create/#usage","title":"Usage","text":"<p>You can find the create functionality within the <code>cxcli flow-version create</code> subcommand. You can read the documentation about this command here.</p>"},{"location":"flowversions/create/#example","title":"Example","text":"<p>Here is a simple example of using the <code>cxcli flow-version create</code> command:</p> <pre><code>cxcli flow-version create \"v1.0.0\" --start-flow \"Test Flow\" --agent-name test-agent --project-id test-cx-346408 --location-id us-central1 --description \"My flow version\"\n</code></pre> <p>The above command will give you output similar to the following:</p> <pre><code>$ cxcli flow-version create \"v1.0.0\" --start-flow \"Test Flow\" --agent-name test-agent --project-id test-cx-346408 --location-id us-central1 --description \"My flow version\"\nINFO Version created with id: projects/test-cx-346408/locations/us-central1/agents/40278ea0-c0fc-4d9a-a4d4-caa68d86295f/flows/b23e0247-2dd4-4d86-a23a-a289569480d4/versions/6\n</code></pre> <p>Is it taking longer than expected?</p> <p>That is okay, depending on the size of the flow it takes longer.</p>"},{"location":"flowversions/create/#useful-links","title":"Useful Links","text":"<p>If you want to learn more about Dialogflow CX flow version creation, refer to the official documentation.</p>"},{"location":"flowversions/delete/","title":"Delete","text":""},{"location":"flowversions/delete/#usage","title":"Usage","text":"<p>You can find the delete functionality within the <code>cxcli flow-version delete</code> subcommand. You can read the documentation about this command here.</p>"},{"location":"flowversions/delete/#example","title":"Example","text":"<p>Here is a simple example of the <code>cxcli flow-version delete</code> command:</p> <pre><code>cxcli flow-version delete \"v1.0.0\" --agent-name test-agent --project-id test-cx-346408 --location-id us-central1\n</code></pre> <p>The above command will give you output similar to the following:</p> <pre><code>$ cxcli flow-version delete \"v1.0.0\" --agent-name test-agent --project-id test-cx-346408 --location-id us-central1\nINFO Version deleted\n</code></pre>"},{"location":"flowversions/delete/#useful-links","title":"Useful Links","text":"<p>If you want to learn more about Dialogflow CX flow version deletion, refer to the official documentation.</p>"},{"location":"flowversions/introduction/","title":"Flow Versions","text":""},{"location":"flowversions/introduction/#what-is-this","title":"What is this?","text":"<p>It is possible to generate various iterations of your agent flows and deploy them to distinct serving environments.</p> <p>When making modifications to a flow, you are essentially modifying a draft version. At any given time, you have the option to save a draft flow as a flow version. A flow version represents an unchangeable snapshot of your flow data along with all the related agent data, such as intents, entities, webhooks, pages, route groups, and more.</p> <p>Furthermore, You can deploy this flow versions to different environments, such as development, test, and production. You can also deploy the same flow version to multiple environments.</p> <p>With <code>cxcli</code>, you can easily interact with the flow versions of your Dialogflow CX agents.</p> <p>All of the commands that you have available in <code>cxcli</code> to interact with your flows are located within the <code>cxcli flow-version</code> subcommand.</p>"},{"location":"flowversions/introduction/#create","title":"Create","text":"<p>The <code>cxcli</code> has a command that allows you to create a flow versions. You can find a more detailed information here.</p>"},{"location":"flowversions/introduction/#update","title":"Update","text":"<p>The <code>cxcli</code> has a command that allows you to update a flow versions. You can find a more detailed information here.</p>"},{"location":"flowversions/introduction/#delete","title":"Delete","text":"<p>The <code>cxcli</code> has a command that allows you to delete your flow versions. You can find a more detailed explanation here.</p>"},{"location":"flowversions/introduction/#useful-links","title":"Useful Links","text":"<p>If you want to see the full usage of the <code>cxcli flow-version</code> command, please refer to this page.</p> <p>If you want to learn more about Dialogflow CX flows, refer to the official documentation.</p>"},{"location":"flowversions/update/","title":"Update","text":""},{"location":"flowversions/update/#usage","title":"Usage","text":"<p>You can find the update functionality within the <code>cxcli flow-version update</code> subcommand. You can read the documentation about this command here.</p>"},{"location":"flowversions/update/#example","title":"Example","text":"<p>Here is a simple example of the <code>cxcli flow update</code> command:</p> <pre><code>cxcli flow-version update \"v1.0.0\" --start-flow \"Test Flow\" --agent-name test-agent --project-id test-cx-346408 --location-id us-central1 --description \"My updated flow version\"\n</code></pre> <p>The above command will give you output similar to the following:</p> <pre><code>$ cxcli flow-version update \"v1.0.0\" --start-flow \"Test Flow\" --agent-name test-agent --project-id test-cx-346408 --location-id us-central1 --description \"My updated flow version\"\nINFO Version updated\n</code></pre>"},{"location":"flowversions/update/#useful-links","title":"Useful Links","text":"<p>If you want to learn more about Dialogflow CX flow version update, refer to the official documentation.</p>"},{"location":"generators/create/","title":"Create","text":""},{"location":"generators/create/#usage","title":"Usage","text":"<p>You can find the create functionality within the <code>cxcli generator create</code> subcommand. You can read the documentation about this command here.</p> <p>If you want to create a generator, you have to set the <code>--prompt</code> parameter. This parameter is the prompt that will be used to generate the responses. You can use placeholders in the prompt to pass parameters to the generator. The parameters can be extracted from the user's input, or from the agent's session parameters.</p> <p>The placeholders have the following format: <code>$parameter-name</code>. For example: <pre><code>Give a warm welcome to the user with name $name\n</code></pre></p>"},{"location":"generators/create/#example","title":"Example","text":"<p>Here is a simple example of using the <code>cxcli generator create</code> command:</p> <pre><code>cxcli generator create my-generator --prompt \"Give a warm welcome to the user with name $name\" --agent-name test-agent --project-id test-cx-346408 --location-id us-central1 \n</code></pre> <p>The above command will give you output similar to the following:</p> <pre><code>$ cxcli generator create my-generator --prompt \"Give a warm welcome to the user with name $name\" --agent-name test-agent --project-id test-cx-346408 --location-id us-central1 \n[INFO] Generator created with id: projects/test-cx-346408/locations/us-central1/agents/40278ea0-c0fc-4d9a-a4d4-caa68d86295f/generators/03b0a452-997c-40dc-afa2-6bef917d224f\n</code></pre>"},{"location":"generators/create/#useful-links","title":"Useful Links","text":"<p>If you want to learn more about Dialogflow CX generator creation, refer to the official documentation.</p>"},{"location":"generators/delete/","title":"Delete","text":""},{"location":"generators/delete/#usage","title":"Usage","text":"<p>You can find the delete functionality within the <code>cxcli generator delete</code> subcommand. You can read the documentation about this command here.</p>"},{"location":"generators/delete/#example","title":"Example","text":"<p>Here is a simple example of the <code>cxcli generator delete</code> command:</p> <pre><code>cxcli generator delete my-generator --agent-name test-agent --project-id test-cx-346408 --location-id us-central1\n</code></pre> <p>The above command will give you output similar to the following:</p> <pre><code>$ cxcli generator delete my-generator --agent-name test-agent --project-id test-cx-346408 --location-id us-central1\nINFO Generator deleted\n</code></pre>"},{"location":"generators/delete/#useful-links","title":"Useful Links","text":"<p>If you want to learn more about Dialogflow CX generator deletion, refer to the official documentation.</p>"},{"location":"generators/introduction/","title":"Generators","text":""},{"location":"generators/introduction/#what-is-this","title":"What is this?","text":"<p>Generators use Google's latest generative large language models (LLMs), and prompts that you provide, to generate agent behavior and responses at runtime. The available models are provided by Vertex AI.</p> <p>You can pass parameters to the generators using placeholders in the prompts. The parameters can be extracted from the user's input, or from the agent's session parameters.</p> <p>This is an example of a generator prompt:</p> <pre><code>Give a warm welcome to the user\n</code></pre> <p>And this is an example of a generator prompt with a placeholder:</p> <pre><code>Give a warm welcome to the user with name $name\n</code></pre> <p>With <code>cxcli</code>, you can easily interact with the generators of your Dialogflow CX agents.</p> <p>All of the commands that you have available in <code>cxcli</code> to interact with your generators are located within the <code>cxcli generator</code> subcommand.</p>"},{"location":"generators/introduction/#create","title":"Create","text":"<p>The <code>cxcli</code> has a command that allows you to create a generator. You can find a more detailed information here.</p>"},{"location":"generators/introduction/#update","title":"Update","text":"<p>The <code>cxcli</code> has a command that allows you to update a generator. You can find a more detailed information here.</p>"},{"location":"generators/introduction/#delete","title":"Delete","text":"<p>The <code>cxcli</code> has a command that allows you to delete a generator. You can find a more detailed explanation here.</p>"},{"location":"generators/introduction/#useful-links","title":"Useful Links","text":"<p>If you want to see the full usage of the <code>cxcli generator</code> command, please refer to this page.</p> <p>If you want to learn more about Dialogflow CX generators, refer to the official documentation.</p>"},{"location":"generators/update/","title":"Update","text":""},{"location":"generators/update/#usage","title":"Usage","text":"<p>You can find the update functionality within the <code>cxcli generator update</code> subcommand. You can read the documentation about this command here.</p> <p>If you want to update a generator, you have to set the <code>--prompt</code> parameter. This parameter is the prompt that will be used to generate the responses. You can use placeholders in the prompt to pass parameters to the generator. The parameters can be extracted from the user's input, or from the agent's session parameters. </p> <p>The placeholders have the following format: <code>$parameter-name</code>. For example: <pre><code>Give a warm welcome to the user with name $name\n</code></pre></p>"},{"location":"generators/update/#example","title":"Example","text":"<p>Here is a simple example of the <code>cxcli generator update</code> command:</p> <pre><code>cxcli generator update my-generator --prompt \"Give a warm farewell to the user with name $name\" --agent-name test-agent --project-id test-cx-346408 --location-id us-central1 \n</code></pre> <p>The above command will give you output similar to the following:</p> <pre><code>$ cxcli generator update my-generator --prompt \"Give a warm farewell to the user with name $name\" --agent-name test-agent --project-id test-cx-346408 --location-id us-central1 \nINFO Generator updated\n</code></pre>"},{"location":"generators/update/#useful-links","title":"Useful Links","text":"<p>If you want to learn more about Dialogflow CX generator update, refer to the official documentation.</p>"},{"location":"intents/create/","title":"Create","text":""},{"location":"intents/create/#usage","title":"Usage","text":"<p>You can find the create functionality within the <code>cxcli intent create</code> subcommand. You can read the documentation about this command here.</p> <p>The <code>--training-phrases</code> parameter is a list of the training phrases for this intent, comma separated. For the entities used in this intent, add <code>@entity-type</code> to the word in the training phrase. This is the format:</p> <pre><code>word@entity-type\n</code></pre> <p>An example training phrase with a entity: <code>hello, hi how are you today@sys.date, morning!</code></p>"},{"location":"intents/create/#example","title":"Example","text":"<p>Here is a simple example of using the <code>cxcli intent create</code> command:</p> <pre><code>cxcli intent create test_intent --training-phrases \"hello, hi how are you today@sys.date, morning\"  --agent-name test-agent --project-id test-cx-346408 --location-id us-central1\n</code></pre> <p>The above command will give you output similar to the following:</p> <pre><code>$ cxcli intent create test_intent --training-phrases \"hello, hi how are you today@sys.date, morning\"  --agent-name test-agent --project-id test-cx-346408 --location-id us-central1\nINFO Intent created with id: projects/test-cx-346408/locations/us-central1/agents/40278ea0-c0fc-4d9a-a4d4-caa68d86295f/intents/a7870357-e942-43dd-99d2-4de8c81a3c09\n</code></pre>"},{"location":"intents/create/#useful-links","title":"Useful Links","text":"<p>If you want to learn more about Dialogflow CX intent creation, refer to the official documentation.</p>"},{"location":"intents/delete/","title":"Delete","text":""},{"location":"intents/delete/#usage","title":"Usage","text":"<p>You can find the delete functionality within the <code>cxcli intent delete</code> subcommand. You can read the documentation about this command here.</p>"},{"location":"intents/delete/#example","title":"Example","text":"<p>Here is a simple example of the <code>cxcli intent delete</code> command:</p> <pre><code>cxcli intent delete test_intent --agent-name test-agent --project-id test-cx-346408 --location-id us-central1\n</code></pre> <p>The above command will give you output similar to the following:</p> <pre><code>$ cxcli intent delete test_intent --agent-name test-agent --project-id test-cx-346408 --location-id us-central1\nINFO Intent deleted\n</code></pre>"},{"location":"intents/delete/#useful-links","title":"Useful Links","text":"<p>If you want to learn more about Dialogflow CX intent deletion, refer to the official documentation.</p>"},{"location":"intents/introduction/","title":"Intent","text":""},{"location":"intents/introduction/#what-is-this","title":"What is this?","text":"<p>Before we discuss intents, it is important to first understand what is natural language understanding (NLU). Natural language understanding is a subset of natural language processing (NLP). It helps a \"machine\" to be able to understand human language.</p> <p>In Dialogflow CX, this is an important concept, since it will help predict the user's intention and allow us to act in a \"smarter\" way, and avoid the all-too-common default fallback intent: \"I did not understand you, could you repeat?\".</p> <p>We refer to these intentions, proposals, or user requests that machine must classify as \"intents\". Each intent has training phrases. For example, the default <code>welcome_intent</code> intent can contain these three training phrases:</p> <ol> <li>Hi</li> <li>Hello</li> <li>Whats up!</li> </ol> <p>As you can see in the example above, the purpose of the <code>welcome_intent</code> intent is to start a conversation when a user says any of these training phrases. An intent can have multiple entities.</p> <p>Whenever you create, modify, or delete an intent, it is important to re-train your Dialogflow CX flows. This will re-train your NLU model. By doing this, your bot will \"understand you\", including your latest changes.</p> <p>With <code>cxcli</code>, you can easily interact with your Dialogflow CX intents.</p> <p>All of the commands that you have available in <code>cxcli</code> to interact with your intents are located within the <code>cxcli intents</code> subcommand.</p>"},{"location":"intents/introduction/#create","title":"Create","text":"<p>The <code>cxcli</code> has a command that allows you to create an intent. You can find a more detailed explanation here</p>"},{"location":"intents/introduction/#update","title":"Update","text":"<p>The <code>cxcli</code> has a command that allows you to update an intent. You can find a more detailed explanation here</p>"},{"location":"intents/introduction/#delete","title":"Delete","text":"<p>The <code>cxcli</code> has a command that allows you to delete your intents. You can find a more detailed explanation here</p>"},{"location":"intents/introduction/#useful-links","title":"Useful Links","text":"<p>If you want to see the full usage of the <code>cxcli intents</code> command, please refer to this page.</p> <p>If you want to learn more about Dialogflow CX intents, refer to the official documentation.</p>"},{"location":"intents/update/","title":"Update","text":""},{"location":"intents/update/#usage","title":"Usage","text":"<p>You can find the update functionality within the <code>cxcli intent update</code> subcommand. You can read the documentation about this command here.</p> <p>The <code>--training-phrases</code> parameter is a list of the training phrases for this intent, comma separated. For the entities used in this intent, add <code>@entity-type</code> to the word in the training phrase. This is the format:</p> <pre><code>word@entity-type\n</code></pre> <p>An example training phrase with a entity: <code>hello, hi how are you today@sys.date, morning!</code></p>"},{"location":"intents/update/#example","title":"Example","text":"<p>Here is a simple example of using the <code>cxcli intent update</code> command:</p> <pre><code>cxcli intent update test_intent --training-phrases \"hello, hi how are you today@sys.date, morning\"  --agent-name test-agent --project-id test-cx-346408 --location-id us-central1\n</code></pre> <p>The above command will give you output similar to the following:</p> <pre><code>$ cxcli intent update test_intent --training-phrases \"hello, hi how are you today@sys.date, morning\"  --agent-name test-agent --project-id test-cx-346408 --location-id us-central1\nINFO Intent updated\n</code></pre>"},{"location":"intents/update/#useful-links","title":"Useful Links","text":"<p>If you want to learn more about Dialogflow CX intent update, refer to the official documentation.</p>"},{"location":"nluprofiler/examples/","title":"Examples","text":""},{"location":"nluprofiler/examples/#simple","title":"Simple","text":"<p>Simple example that demonstrates the NLU Profiler in action. Find it here</p>"},{"location":"nluprofiler/examples/#system-entity-detection","title":"System entity detection","text":"<p>Example that shows how to validate Dialogflow CX built-in entities. Find it here</p>"},{"location":"nluprofiler/examples/#text-input-with-entities","title":"Text input with entities","text":"<p>Full example with multiple user-defined entities and Dialogflow CX built-in entities. Find it here</p>"},{"location":"nluprofiler/examples/#prompt","title":"Prompt","text":"<p>Example that shows how to use a prompt as an user input Dialogflow CX. Find it here</p>"},{"location":"nluprofiler/examples/#audio-input","title":"Audio input","text":"<p>Example using an audio file as an input. Find it here</p>"},{"location":"nluprofiler/introduction/","title":"NLU profiler","text":""},{"location":"nluprofiler/introduction/#what-is-this","title":"What is this?","text":"<p>Use the NLU Profiler to test user utterances and improve your agent's interaction model.</p> <p>With the NLU Profiler, you can see how utterances resolve to intents and slots in your interaction model. When an utterance doesn't resolve to the right intent or slot, you can update the interaction model and try again. With the <code>cxcli</code>, you can see which intents Dialogflow CX considered and discarded. Then, you can determine how to use additional samples to train your model to resolve utterances to their desired intents and slots.</p> <p>Every suite is executed in the Dialogflow CX session so you can test not only your NLU but also a conversation itself.</p> <p>All of the commands that are available in <code>cxcli</code> to execute the NLU profiler are located within the <code>cxcli profile-nlu</code> subcommand.</p>"},{"location":"nluprofiler/introduction/#reference","title":"Reference","text":"<p>It is important to know which suites and tests you can build. Because of that, you can find the entire reference on the Reference page. Suites and test are defined as <code>yaml</code> files.</p> <p>The <code>cxcli</code> has a command that allows you to run these suites from your terminal or from your CI pipelines.</p> <p>To execute a suite, you can run the <code>cxcli profile-nlu execute</code> command. For the usage, please refer to this page.</p>"},{"location":"nluprofiler/introduction/#examples","title":"Examples","text":"<p>You can find some useful examples on our GitHub repo and the Examples page.</p>"},{"location":"nluprofiler/introduction/#execution-example","title":"Execution Example","text":"<p>Here is a simple example of the <code>cxcli profile-nlu execute</code> command:</p> <pre><code>cxcli profile-nlu execute examples/profilenlu/suite.yaml\n</code></pre> <p>The above command will give you output similar to the following:</p> <pre><code>$ cxcli profile-nlu execute suite.yaml\n[INFO] Running suite: Example NLU Profiler Suite\n[INFO][test-file:test_1][check:test_1_1][input:prompt] User&gt; hi (auto-generated from prompt: \"give me a one line hello without exclamation mark using only 2 characters and lowercase\")\n[INFO][test-file:test_1][check:test_1_1][input:prompt] Agent&gt; Hi! How are you doing?\n[INFO][test-file:test_1][check:test_1_1][validation:hi_intent] Intent Detected: hi_intent\n[INFO][test-file:test_1][check:test_1_2][input:text] User&gt; hello\n[INFO][test-file:test_1][check:test_1_2][input:text] Agent&gt; Hi! How are you doing?\n[INFO][test-file:test_1][check:test_1_2][validation:hi_intent] Intent Detected: hi_intent\n[INFO][test-file:test_1][check:test_1_3][input:audio] User&gt; ./audio/hi.mp3\n[INFO][test-file:test_1][check:test_1_3][input:audio] Agent&gt; Hi! How are you doing?\n[INFO][test-file:test_1][check:test_1_3][validation:hi_intent] Intent Detected: hi_intent\n[INFO][test-file:test_2][check:test_2_1][input:text] User&gt; I want 3 pizzas\n[INFO][test-file:test_2][check:test_2_1][input:text] Agent&gt; \n[INFO][test-file:test_2][check:test_2_1][validation:order_intent] Intent Detected: order_intent\n[INFO][test-file:test_2][check:test_2_1][validation:order_intent] Param order_type: pizza \n[INFO][test-file:test_2][check:test_2_1][validation:order_intent] Param number: 3 \n[INFO][test-file:test_2][check:test_2_2][input:text] User&gt; I want 2 cokes\n[INFO][test-file:test_2][check:test_2_2][input:text] Agent&gt; \n[INFO][test-file:test_2][check:test_2_2][validation:order_intent] Intent Detected: order_intent\n[INFO][test-file:test_2][check:test_2_2][validation:order_intent] Param number: 2 \n[INFO][test-file:test_2][check:test_2_2][validation:order_intent] Param order_type: coke \n</code></pre> <p>Are you running this command in a CI/CD pipeline?</p> <p>If this is the case, we recommend that you set the <code>--output-format</code> parameter to <code>json</code>.</p>"},{"location":"nluprofiler/suites/","title":"Suites","text":""},{"location":"nluprofiler/suites/#reference","title":"Reference","text":"<p>A suite is a yaml file with the following structure:</p> <pre><code># suite.yaml\n\n# Name of the suite.\nname: Example Suite\n# Brief description of the suite.\ndescription: Suite used as an example\n# Project ID on Google Cloud where is located your Dialogflow CX agent.\nprojectId: test-cx-346408\n# Location where your Dialogflow CX agent is running. \n# More info here: https://cloud.google.com/dialogflow/cx/docs/concept/region\nlocationId: us-central1\n# Agent name of your Dialogflow CX agent.\n# Notice: it is the agent name, not the agent ID.\nagentName: test-agent\n# You can have multiple tests defined in separated files\ntests:\n  # ID of the test.\n  - id: test_id\n    # File where the test specification is located\n    file: ./test.yaml\n</code></pre> <p>It has the same structure as the Conversation Profiler suite.</p>"},{"location":"nluprofiler/suites/#json-schema","title":"JSON Schema","text":"<p><code>cxcli</code> also has a jsonschema file, which you can use to have better editor support:</p> <pre><code>https://cxcli.xavidop.me/static/nlusuite.json\n</code></pre> <p>You can also specify it in your <code>yml</code> config files by adding a comment like the following: <pre><code># yaml-language-server: $schema=https://cxcli.xavidop.me/static/nlusuite.json\n</code></pre></p>"},{"location":"nluprofiler/tests/","title":"Tests","text":""},{"location":"nluprofiler/tests/#reference","title":"Reference","text":"<p>A test is a yaml file with the following structure:</p> <pre><code># test.yaml\n\n# Name of the test.\nname: Example test\n# Brief description of the test.\ndescription: These are some tests\n# Locale of the interaction model that is gonna be tested.\n# You can find the locales here: https://cloud.google.com/dialogflow/cx/docs/reference/language\nlocaleId: en\n# A check is the test itself: given an input, you will validate the intents and the parameters/entities detected by Dialogflow CX\n# You can have multiple checks defined\nchecks:\n  # The ID of the check\n  - id: test\n    input:\n      # the input type\n      # it could be text or audio\n      type: text\n      # The input itself in text format. For type: audio, you have to specify the audio file.\n      text: I want 3 pizzas\n    validate:\n      # Intent that is supposed to be detected\n      intent: order_intent\n      # You can have multiple parameters/intents\n      # Notice: this could be empty if your intent does not have any entities/parameters.\n      parameters:\n        # Entity name that is supposed to be detected\n        - parameter: number\n          # Value that is supposed to be detected\n          value: 3\n</code></pre>"},{"location":"nluprofiler/tests/#input-types","title":"Input types","text":""},{"location":"nluprofiler/tests/#text-input","title":"Text input","text":"<p>The input text is the simplest one. You just have to specify the text you want to send to Dialogflow CX. Make sure that the text is in the language you specified in the <code>localeId</code> field. to use this type you have to set the <code>type</code> field to <code>text</code> and the <code>text</code> field to the text you want to send.</p>"},{"location":"nluprofiler/tests/#audio-input","title":"Audio input","text":"<p>The audio input is a little bit more complex. You have to specify the path to the audio file you want to send to Dialogflow CX. Make sure that the audio file is in the language you specified in the <code>localeId</code> field. To use this type you have to set the <code>type</code> field to <code>audio</code> and the <code>file</code> field to the path to the audio file.</p> <p>It is important to know that the input audio needs to have the following format:</p> <ol> <li>A sample rate of 16000 Hertz</li> <li>The audio encoding has to be Linear16. Linear16 is a 16-bit linear pulse-code modulation (PCM) encoding.</li> </ol> <p>If you don't have a file with this format, you can create it by yourself using the <code>cxcli tts</code> command! All the information is located here</p>"},{"location":"nluprofiler/tests/#prompt-input","title":"Prompt input","text":"<p>The prompt input is the most complex one. You have to specify the input prompt you want to send to Dialogflow CX. To use this type you have to set the <code>type</code> field to <code>prompt</code> and the <code>prompt</code> field to the prompt you want to send.</p> <p>It is important to know that the input prompt needs Vertex AI API to be enabled in your project and the proper permissions granted.  You can find more information on the Authentication page.</p>"},{"location":"nluprofiler/tests/#validation-types","title":"Validation types","text":""},{"location":"nluprofiler/tests/#intent-validation","title":"Intent validation","text":"<p>The intent validation is the simplest one. You just have to specify the intent you want to validate. To use this type you have to set the <code>intent</code> field to the intent you want to validate:</p> <pre><code>validate:\n  # Intent that is supposed to be detected\n  intent: order_intent\n</code></pre>"},{"location":"nluprofiler/tests/#parameter-validation","title":"Parameter validation","text":"<p>The parameter validation is a little bit more complex. You have to specify the parameters you want to validate and the values that are supposed to be detected. To use this type you have to set a list wit of parameters and each value must have the <code>parameter</code> field to the parameter you want to validate and the <code>value</code> field to the value that is supposed to be detected:</p> <pre><code>validate:\n  # Intent that is supposed to be detected\n  intent: order_intent\n  # You can have multiple parameters/intents\n  # Notice: this could be empty if your intent does not have any entities/parameters.\n  parameters:\n    # Entity name that is supposed to be detected\n    - parameter: number\n      # Value that is supposed to be detected\n      value: 3\n</code></pre>"},{"location":"nluprofiler/tests/#json-schema","title":"JSON Schema","text":"<p><code>cxcli</code> also has a jsonschema file, which you can use to have better editor support:</p> <pre><code>https://cxcli.xavidop.me/static/nlutest.json\n</code></pre> <p>You can also specify it in your <code>yml</code> config files by adding a comment like the following: <pre><code># yaml-language-server: $schema=https://cxcli.xavidop.me/static/nlutest.json\n</code></pre></p>"},{"location":"nluprofiler/examples/audio/","title":"Audio input","text":""},{"location":"nluprofiler/examples/audio/#suite-file","title":"Suite file","text":"<pre><code># suite.yaml\n\nname: Example Suite\ndescription: Suite used as an example\nprojectId: test-cx-346408\nlocationId: us-central1\nagentName: test-agent\ntests:\n  - id: test_id\n    file: ./test.yaml\n</code></pre>"},{"location":"nluprofiler/examples/audio/#test-file","title":"Test file","text":"<pre><code># test.yaml\n\nname: Example test\ndescription: These are some tests\nlocaleId: en\nchecks:\n  - id: my_check\n    input: \n      type: audio\n      audio: ./audio/hi.mp3\n    validate:\n      intent: hi_intent\n</code></pre> <p>You can download the audio file used in this example here</p>"},{"location":"nluprofiler/examples/prompt/","title":"Prompt example","text":""},{"location":"nluprofiler/examples/prompt/#suite-file","title":"Suite file","text":"<pre><code># suite.yaml\n\nname: Example Suite\ndescription: Suite used as an example\nprojectId: test-cx-346408\nlocationId: us-central1\nagentName: test-agent\ntests:\n  - id: test_id\n    file: ./test.yaml\n</code></pre>"},{"location":"nluprofiler/examples/prompt/#test-file","title":"Test file","text":"<pre><code># test.yaml\n\nname: Example test\ndescription: These are some tests\nlocaleId: en\nchecks:\n  - id: my_first_check\n    input: \n      type: prompt\n      prompt: give me a one line hello without exclamation mark using only 2 characters and lowercase\n    validate:\n      intent: hi_intent\n\n  - id: my_second_check\n    input: \n      type: text\n      text: hello\n    validate:\n      intent: hi_intent\n</code></pre>"},{"location":"nluprofiler/examples/simple/","title":"Simple example","text":""},{"location":"nluprofiler/examples/simple/#suite-file","title":"Suite file","text":"<pre><code># suite.yaml\n\nname: Example Suite\ndescription: Suite used as an example\nprojectId: test-cx-346408\nlocationId: us-central1\nagentName: test-agent\ntests:\n  - id: test_id\n    file: ./test.yaml\n</code></pre>"},{"location":"nluprofiler/examples/simple/#test-file","title":"Test file","text":"<pre><code># test.yaml\n\nname: Example test\ndescription: These are some tests\nlocaleId: en\nchecks:\n  - id: my_first_check\n    input: \n      type: text\n      text: hi\n    validate:\n      intent: hi_intent\n\n  - id: my_second_check\n    input: \n      type: text\n      text: hello\n    validate:\n      intent: hi_intent\n</code></pre>"},{"location":"nluprofiler/examples/system/","title":"System entity detection example","text":""},{"location":"nluprofiler/examples/system/#suite-file","title":"Suite file","text":"<pre><code># suite.yaml\n\nname: Example Suite\ndescription: Suite used as an example\nprojectId: test-cx-346408\nlocationId: us-central1\nagentName: test-agent\ntests:\n  - id: test_id\n    file: ./test.yaml\n</code></pre>"},{"location":"nluprofiler/examples/system/#test-file","title":"Test file","text":"<pre><code># test.yaml\n\nname: Example test\ndescription: These are some tests\nlocaleId: en\nchecks:\n  - id: my_check\n    input: \n      type: text\n      text: please, give me 3\n    validate:\n      intent: finish_order_intent\n      parameters:\n        - parameter: number\n          value: 3\n</code></pre>"},{"location":"nluprofiler/examples/text/","title":"Text input with parameters example","text":""},{"location":"nluprofiler/examples/text/#suite-file","title":"Suite file","text":"<pre><code># suite.yaml\n\nname: Example Suite\ndescription: Suite used as an example\nprojectId: test-cx-346408\nlocationId: us-central1\nagentName: test-agent\ntests:\n  - id: test_id\n    file: ./test.yaml\n</code></pre>"},{"location":"nluprofiler/examples/text/#test-file","title":"Test file","text":"<pre><code># test.yaml\n\nname: Example test\ndescription: These are some tests\nlocaleId: en\nchecks:\n  - id: my_first_check\n    input: \n      type: text\n      text: I want 3 pizzas\n    validate:\n      intent: order_intent\n      parameters:\n        - parameter: number\n          value: 3\n        - parameter: order_type\n          value: pizza\n\n  - id: my_second_check\n    input: \n      type: text\n      text: I want 2 cokes\n    validate:\n      intent: order_intent\n      parameters:\n        - parameter: number\n          value: 2\n        - parameter: order_type\n          value: coke\n</code></pre>"},{"location":"overview/authentication/","title":"Authentication","text":"<p><code>cxcli</code> uses various Google Cloud APIs. By default, the tool uses the default configuration that uses the <code>gcloud</code> cli. If you want to use another authentication key you can provide a <code>json</code> file with the global <code>--credentials</code> parameter.</p> <p>The <code>cxcli</code> source code is open source, you can check it out here to learn more about the actions the tool performs.</p> <p>Below you can find the roles and the APIs that are required to use this tool.</p>"},{"location":"overview/authentication/#roles-needed","title":"Roles needed","text":""},{"location":"overview/authentication/#dialogflow-cx","title":"Dialogflow CX","text":"<p>Dialogflow API Admin: Provides full access to create, update, query, detect intent, and delete the agent from the console or API. Click here for more information.</p> <p>We are using the Admin role because <code>cxcli</code> performs the List agent action.</p> <p>This role allows you to execute Speech-to-text and Text-to-speech actions</p>"},{"location":"overview/authentication/#apis-enabled-needed","title":"APIs enabled needed","text":"<p>The following APIs should be enabled on your Google Cloud project if you want to use the respective <code>cxcli</code> capabilities:</p>"},{"location":"overview/authentication/#dialogflow-cx_1","title":"Dialogflow CX","text":"<p>You will need to enable the <code>Dialogflow API</code> on your project. More information here</p>"},{"location":"overview/authentication/#speech-to-text","title":"Speech-to-text","text":"<p>You will need to enable the <code>Cloud Speech-to-Text API</code> on your project. More information here</p>"},{"location":"overview/authentication/#text-to-speech","title":"Text-to-speech","text":"<p>You will need to enable the <code>Cloud Text-to-Speech API</code> on your project. More information here</p>"},{"location":"overview/authentication/#generative-ai-on-vertex-ai","title":"Generative AI on Vertex AI","text":"<p>You will need to enable the <code>Vertex AI API</code> on your project. More information here</p>"},{"location":"overview/faq/","title":"Frequently Asked Questions (FAQ)","text":""},{"location":"overview/faq/#how-does-it-work","title":"How does it work?","text":"<p><code>cxcli</code> has three main purposes:</p> <ol> <li>Make the interaction with your Dialogflow CX agents from your laptop or your continuous integration pipelines easier than ever</li> <li>Create testing tools that will help users build their Dialogflow CX agent</li> <li>Interact with other Google Cloud APIs such as TTS and STT in a very easy way</li> </ol>"},{"location":"overview/faq/#who-is-cxcli-for","title":"Who is <code>cxcli</code> for?","text":"<p><code>cxcli</code> is primarily for software engineering teams who are currently using Dialogflow CX. It is recommended for machine learning engineers that usually work with STT, TTS, NLU and NLP technologies.</p>"},{"location":"overview/faq/#what-kind-of-machinescontainers-do-i-need-for-the-cxcli","title":"What kind of machines/containers do I need for the <code>cxcli</code>?","text":"<p>You'll need either: a bare-metal host (your own, AWS i3.metal or Equinix Metal) or a VM that supports nested virtualisation such as those provided by Google Cloud, Azure, AWS DigitalOcean, etc. or a Linux or Windows container.</p>"},{"location":"overview/faq/#when-will-jenkins-gitlab-ci-bitbucket-pipeline-runners-drone-or-azure-devops-be-supported","title":"When will Jenkins, GitLab CI, BitBucket Pipeline Runners, Drone or Azure DevOps be supported?","text":"<p>For the current phase, we're targeting GitHub Actions because it has fine-grained access controls and the ability to schedule exactly one build to a runner. The other CI systems will be available soon.</p> <p>That said, if you're using these tools within your organisation, we'd like to hear from you. So feel free to reach out to us if you feel <code>cxcli</code> would be a good fit for your team.</p> <p>Feel free to contact us at: dialogflowcxcli@gmail.com</p>"},{"location":"overview/faq/#what-kind-of-access-is-required-in-my-google-cloud-project","title":"What kind of access is required in my Google Cloud project?","text":"<p>Refer to the Authentication page here</p>"},{"location":"overview/faq/#can-cxcli-be-used-on-public-repos","title":"Can cxcli be used on public repos?","text":"<p>Yes, <code>cxcli</code> can be used on public and private repos.</p>"},{"location":"overview/faq/#whats-in-the-container-image-and-how-is-it-built","title":"What's in the Container image and how is it built?","text":"<p>The Container image contains uses <code>alpine:latest</code> and the <code>cxcli</code> installed on it.</p> <p>The image is built automatically using GitHub Actions and is available on a container registry.</p>"},{"location":"overview/faq/#is-arm64-supported","title":"Is ARM64 supported?","text":"<p>Yes, <code>cxcli</code> is built to run on both Intel/AMD and ARM64 hosts. This includes a Raspberry Pi 4B, AWS Graviton, Oracle Cloud ARM instances and potentially any other ARM64 instances that support virtualisation.</p>"},{"location":"overview/faq/#are-windows-or-macos-supported","title":"Are Windows or macOS supported?","text":"<p>Yes, in addition to Linux, Windows and macOS are also supported platforms for <code>cxcli</code> at this time on a AMD64 or ARM64 architecture.</p>"},{"location":"overview/faq/#is-cxcli-free-and-open-source","title":"Is <code>cxcli</code> free and open-source?","text":"<p><code>cxcli</code> is an open source tool, however, it interacts with Google Cloud APIs, so a Google Cloud account is required.</p> <p>The website and documentation are available on GitHub and we plan to release some open source tools in the future for cxcli customers.</p>"},{"location":"overview/faq/#is-there-a-risk-that-we-could-get-locked-in-to-cxcli","title":"Is there a risk that we could get \"locked-in\" to <code>cxcli</code>?","text":"<p>No, you can switch back to using either the <code>gcloud</code> CLI tool or the Google Cloud APIs at any time. Keep in mind that <code>cxcli</code> not only solves for a certain set of issues with both of those approaches but also simplifies the interaction with Google Cloud.</p>"},{"location":"overview/faq/#why-is-the-brand-called-cxcli-and-dialogflow-cx-cli","title":"Why is the brand called \"cxcli\" and \"Dialogflow CX CLI\" ?","text":"<p>The name of the software is <code>cxcli</code>, in some places \"cxcli\" is not available, and we liked \"Dialogflow CX CLI\" because it refers to the what the tool does.</p>"},{"location":"overview/install/","title":"Install","text":"<p>You can use <code>cxcli</code> by installing a pre-compiled binary (in several ways), using Docker, or compiling it from source. In the below sections, you can find the steps for each approach.</p>"},{"location":"overview/install/#install-a-pre-compiled-binary","title":"Install a pre-compiled binary","text":""},{"location":"overview/install/#homebrew-tap","title":"homebrew tap","text":"<p>Install the Dialogflow CX CLI: <pre><code>brew install xavidop/tap/cxcli\n</code></pre></p>"},{"location":"overview/install/#snapcraft","title":"snapcraft","text":"<pre><code>sudo snap install cxcli\n</code></pre>"},{"location":"overview/install/#scoop","title":"scoop","text":"<pre><code>scoop bucket add cxcli https://github.com/xavidop/scoop-bucket.git\nscoop install cxcli\n</code></pre>"},{"location":"overview/install/#chocolatey","title":"chocolatey","text":"<pre><code>choco install cxcli\n</code></pre>"},{"location":"overview/install/#apt","title":"apt","text":"<pre><code>echo 'deb [trusted=yes] https://apt.fury.io/xavidop/ /' | sudo tee /etc/apt/sources.list.d/cxcli.list\nsudo apt update\nsudo apt install cxcli\n</code></pre>"},{"location":"overview/install/#yum","title":"yum","text":"<pre><code>echo '[cxcli]\nname=Dialogflow CX CLI Repo\nbaseurl=https://yum.fury.io/xavidop/\nenabled=1\ngpgcheck=0' | sudo tee /etc/yum.repos.d/cxcli.repo\nsudo yum install cxcli\n</code></pre>"},{"location":"overview/install/#aur","title":"aur","text":"<pre><code>yay -S cxcli-bin\n</code></pre>"},{"location":"overview/install/#nix","title":"nix","text":""},{"location":"overview/install/#nixpkgs","title":"nixpkgs","text":"<pre><code>nix-env -iA cxcli\n</code></pre> <p>Info</p> <p>The package in nixpkgs might be slightly outdated, as it is not updated automatically. Use our NUR to always get the latest updates.</p>"},{"location":"overview/install/#nur","title":"nur","text":"<p>First, you'll need to add our NUR to your nix configuration. You can follow the guides here.</p> <p>Once you do that, you can install the packages.</p> <pre><code>{ pkgs, lib, ... }: {\n    home.packages = with pkgs; [\n    nur.repos.xavidop.cxcli\n    ];\n}\n</code></pre>"},{"location":"overview/install/#deb-rpm-and-apk-packages","title":"deb, rpm and apk packages","text":"<p>Download the <code>.deb</code>, <code>.rpm</code> or <code>.apk</code> packages from the OSS releases page and install them with the appropriate tools.</p>"},{"location":"overview/install/#go-install","title":"go install","text":"<pre><code>go install github.com/xavidop/dialogflow-cx-cli@latest\n</code></pre>"},{"location":"overview/install/#bash-script","title":"bash script","text":"<pre><code>curl -sfL https://cxcli.xavidop.me/static/run | bash\n</code></pre>"},{"location":"overview/install/#additional-options","title":"Additional Options","text":"<p>You can also set the <code>VERSION</code> variable to specify a version instead of using latest.</p> <p>You can also pass flags and args to cxcli:</p> <pre><code>curl -sfL https://cxcli.xavidop.me/static/run |\n    VERSION=__VERSION__ bash -s -- version\n</code></pre> <p>Tip</p> <p>This script does not install anything, it just downloads, verifies and runs cxcli. Its purpose is to be used within scripts and CIs.</p>"},{"location":"overview/install/#manually","title":"manually","text":"<p>Download the pre-compiled binaries from the releases page and copy them to the desired location.</p>"},{"location":"overview/install/#verifying-the-artifacts","title":"Verifying the artifacts","text":""},{"location":"overview/install/#binaries","title":"binaries","text":"<p>All artifacts are checksummed, and the checksum file is signed with cosign.</p> <ol> <li>Download the files you want along with the <code>checksums.txt</code>, <code>checksum.txt.pem</code>, and <code>checksums.txt.sig</code> files from the releases page:     <pre><code>wget https://github.com/xavidop/dialogflow-cx-cli/releases/download/__VERSION__/checksums.txt\nwget https://github.com/xavidop/dialogflow-cx-cli/releases/download/__VERSION__/checksums.txt.sig\nwget https://github.com/xavidop/dialogflow-cx-cli/releases/download/__VERSION__/checksums.txt.pem\n</code></pre></li> <li>Verify the signature:     <pre><code>COSIGN_EXPERIMENTAL=1 cosign verify-blob \\\n--cert checksums.txt.pem \\\n--signature checksums.txt.sig \\\nchecksums.txt\n</code></pre></li> <li>If the signature is valid, you can then verify the SHA256 sums match with the downloaded binary:     <pre><code>sha256sum --ignore-missing -c checksums.txt\n</code></pre></li> </ol>"},{"location":"overview/install/#docker-images","title":"docker images","text":"<p>Our Docker images are signed with cosign.</p> <p>Verify the signatures:</p> <pre><code>COSIGN_EXPERIMENTAL=1 cosign verify xavidop/cxcli\n</code></pre> <p>Info</p> <p>The <code>.pem</code> and <code>.sig</code> files are the image <code>name:tag</code>, replacing <code>/</code> and <code>:</code> with <code>-</code>.</p>"},{"location":"overview/install/#running-with-docker","title":"Running with Docker","text":"<p>You can also use <code>cxcli</code> within a Docker container. To do that, you'll need to execute something more-or-less like the examples below.</p> <p>Registries:</p> <ul> <li><code>xavidop/cxcli</code></li> <li><code>ghcr.io/xavidop/cxcli</code></li> </ul> <p>Example usage:</p> <pre><code>docker run --rm \\\n    xavidop/cxcli cxcli version\n</code></pre> <p>Note that the image will almost always have the last stable Go version.</p> <p>If you need other packages and dependencies, you are encouraged to keep your own image. You can always use cxcli's own Dockerfile as a starting point and iterate on that.</p>"},{"location":"overview/install/#compiling-from-source","title":"Compiling from source","text":"<p>Here you have two options:</p> <p>If you want to contribute to the project, please follow the steps on our contributing guide.</p> <p>If you just want to build from source for whatever reason, follow these steps:</p> <p>clone:</p> <pre><code>git clone https://github.com/xavidop/dialogflow-cx-cli\ncd dialogflow-cx-cli\n</code></pre> <p>get the dependencies:</p> <pre><code>go mod tidy\n</code></pre> <p>build:</p> <pre><code>go build -o cxcli .\n</code></pre> <p>verify that it works:</p> <pre><code>./cxcli version\n</code></pre>"},{"location":"overview/roadmap/","title":"Roadmap","text":"<p><code>cxcli</code> is in active development. The core product is functioning.</p> <p>Our goal with the tool is to prove that there's market fit for a solution like this, and if so, we'll invest more time in automation, user experience, more features.</p> <p>For now, if you're interested in participating and giving feedback, we believe <code>cxcli</code> already solves pain at this stage.</p> <p>Shipped:</p> <ul> <li> Available in homebrew, snapcraft, apt, yum, scoop, aur package managers</li> <li> Documentation updated</li> <li> Profile NLU</li> <li> Speech-to-text and Text-to-speech actions</li> <li> Container image available for multiple architectures</li> <li> SBOM files created</li> <li> Artifacts uploaded, signed and available on GitHub</li> </ul> <p>Coming soon:</p> <ul> <li> Continuous integration support (GitHub Action, CircleCI, etc.)</li> <li> Flow import and export</li> <li> Dialog from the terminal</li> <li> More Agent actions (validate)</li> <li> Pages Action (crate, update, delete)</li> <li> Test Cases actions (export, import, run, run-all)</li> <li> Changelog actions (show)</li> <li> Experiment Actions - TBD</li> </ul>"},{"location":"webhooks/create/","title":"Create","text":""},{"location":"webhooks/create/#usage","title":"Usage","text":"<p>You can find the create functionality within the <code>cxcli webhook create</code> subcommand. You can read the documentation about this command here.</p>"},{"location":"webhooks/create/#flexible-webhook","title":"Flexible Webhook","text":"<p>If you want to create a flexible webhook, you have to set the <code>--flexible</code> parameter. When you set these parameters, you have to provide a <code>--request-body</code> and a <code>--parameters-mapping</code> parameter: </p> <ol> <li>The <code>--request-body</code> parameter is a JSON string that will be sent to the webhook.</li> <li>The <code>--parameters-mapping</code> parameter is a comma-separated list of key-value pairs. The key is the name of the parameter that will be sent to the webhook, and the value is a JSON path that will be used to extract the value from the <code>--request-body</code> parameter. This parameter has the following format: <pre><code>parameter@json-path,paramter2@json-path2\n</code></pre> An example of a parameter mapping: <code>my-param@$.fully.qualified.path.to.field</code></li> </ol>"},{"location":"webhooks/create/#example","title":"Example","text":""},{"location":"webhooks/create/#standard-webhook","title":"Standard Webhook","text":"<p>Here is a simple example of using the <code>cxcli webhook create</code> command:</p> <pre><code>cxcli webhook create my-webhook --url \"https://my-webhook.com\" --agent-name test-agent --project-id test-cx-346408 --location-id us-central1 \n</code></pre> <p>The above command will give you output similar to the following:</p> <pre><code>$ cxcli webhook create my-webhook --url \"https://my-webhook.com\" --agent-name test-agent --project-id test-cx-346408 --location-id us-central1 \nINFO Webhook created with id: projects/test-cx-346408/locations/us-central1/agents/40278ea0-c0fc-4d9a-a4d4-caa68d86295f/webhooks/55f56aeb-be30-40a2-8bd6-cbbd6b9cc041\n</code></pre>"},{"location":"webhooks/create/#flexible-webhook_1","title":"Flexible Webhook","text":"<pre><code>cxcli webhook create my-webhook --url \"https://my-webhook.com\" --agent-name test-agent --project-id test-cx-346408 --location-id us-central1 --flexible true --request-body \"{\\\"hello\\\": true}\" --parameters-mapping \"my-param@$.fully.qualified.path.to.field, my-param2@$.fully.qualified.path.to.field2\"\n</code></pre> <p>The above command will give you output similar to the following:</p> <pre><code>$ cxcli webhook create my-webhook --url \"https://my-webhook.com\" --agent-name test-agent --project-id test-cx-346408 --location-id us-central1 --flexible true --request-body \"{\\\"hello\\\": true}\" --parameters-mapping \"my-param@$.fully.qualified.path.to.field, my-param2@$.fully.qualified.path.to.field2\"\nINFO Webhook created with id: projects/test-cx-346408/locations/us-central1/agents/40278ea0-c0fc-4d9a-a4d4-caa68d86295f/webhooks/13df6f13-6848-4fab-8cda-752b4f9819fa \n</code></pre>"},{"location":"webhooks/create/#useful-links","title":"Useful Links","text":"<p>If you want to learn more about Dialogflow CX webhook creation, refer to the official documentation.</p>"},{"location":"webhooks/delete/","title":"Delete","text":""},{"location":"webhooks/delete/#usage","title":"Usage","text":"<p>You can find the delete functionality within the <code>cxcli webhook delete</code> subcommand. You can read the documentation about this command here.</p>"},{"location":"webhooks/delete/#example","title":"Example","text":"<p>Here is a simple example of the <code>cxcli webhook delete</code> command:</p> <pre><code>cxcli webhook delete my-webhook --agent-name test-agent --project-id test-cx-346408 --location-id us-central1\n</code></pre> <p>The above command will give you output similar to the following:</p> <pre><code>$ cxcli webhook delete my-webhook --agent-name test-agent --project-id test-cx-346408 --location-id us-central1\nINFO Webhook deleted\n</code></pre>"},{"location":"webhooks/delete/#useful-links","title":"Useful Links","text":"<p>If you want to learn more about Dialogflow CX webhook deletion, refer to the official documentation.</p>"},{"location":"webhooks/introduction/","title":"Webhooks","text":""},{"location":"webhooks/introduction/#what-is-this","title":"What is this?","text":"<p>Webhooks serve as platforms for hosting your business logic or invoking other services. Within a session, webhooks enable you to utilize the data extracted through Dialogflow's natural language processing to generate dynamic responses, verify gathered data, or initiate actions on the backend.</p> <p>There are two types of webhooks: standard webhooks and flexible webhooks. In the case of a standard webhook, the request and response fields are determined by Dialogflow. On the other hand, a flexible webhook allows you to specify the request and response fields according to your requirements.</p> <p>With <code>cxcli</code>, you can easily interact with the webhooks of your Dialogflow CX agents.</p> <p>All of the commands that you have available in <code>cxcli</code> to interact with your webhooks are located within the <code>cxcli webhook</code> subcommand.</p> <p>You can create, update or delete standard and flexible webhooks with <code>cxcli</code> for a specific environment by setting the <code>--environment</code> parameter. If you do not specify an environment, the <code>cxcli</code> will create, update or delete this webhook for all environments.</p>"},{"location":"webhooks/introduction/#create","title":"Create","text":"<p>The <code>cxcli</code> has a command that allows you to create a standard or flexible webhook. You can find a more detailed information here.</p>"},{"location":"webhooks/introduction/#update","title":"Update","text":"<p>The <code>cxcli</code> has a command that allows you to update a standard or flexible webhook. You can find a more detailed information here.</p>"},{"location":"webhooks/introduction/#delete","title":"Delete","text":"<p>The <code>cxcli</code> has a command that allows you to delete your standard or flexible webhook. You can find a more detailed explanation here.</p>"},{"location":"webhooks/introduction/#useful-links","title":"Useful Links","text":"<p>If you want to see the full usage of the <code>cxcli webhook</code> command, please refer to this page.</p> <p>If you want to learn more about Dialogflow CX webhooks, refer to the official documentation.</p>"},{"location":"webhooks/update/","title":"Update","text":""},{"location":"webhooks/update/#usage","title":"Usage","text":"<p>You can find the update functionality within the <code>cxcli webhook update</code> subcommand. You can read the documentation about this command here.</p>"},{"location":"webhooks/update/#flexible-webhook","title":"Flexible Webhook","text":"<p>If you want to update a flexible webhook, you have to set the <code>--flexible</code> parameter. When you set these parameters, you have to provide a <code>--request-body</code> and a <code>--parameters-mapping</code> parameter: </p> <ol> <li>The <code>--request-body</code> parameter is a JSON string that will be sent to the webhook.</li> <li>The <code>--parameters-mapping</code> parameter is a comma-separated list of key-value pairs. The key is the name of the parameter that will be sent to the webhook, and the value is a JSON path that will be used to extract the value from the <code>--request-body</code> parameter. This parameter has the following format: <pre><code>parameter@json-path,paramter2@json-path2\n</code></pre> An example of a parameter mapping: <code>my-param@$.fully.qualified.path.to.field</code></li> </ol>"},{"location":"webhooks/update/#example","title":"Example","text":""},{"location":"webhooks/update/#standard-webhook","title":"Standard Webhook","text":"<p>Here is a simple example of the <code>cxcli webhook update</code> command:</p> <pre><code>cxcli webhook update my-webhook --url \"https://my-webhook-updated.com\" --agent-name test-agent --project-id test-cx-346408 --location-id us-central1 \n</code></pre> <p>The above command will give you output similar to the following:</p> <pre><code>$ cxcli webhook update my-webhook --url \"https://my-webhook-updated.com\" --agent-name test-agent --project-id test-cx-346408 --location-id us-central1 \nINFO Webhook updated\n</code></pre>"},{"location":"webhooks/update/#flexible-webhook_1","title":"Flexible Webhook","text":"<p>Here is a simple example of the <code>cxcli webhook update</code> command:</p> <pre><code>cxcli webhook update my-webhook --url \"https://my-webhook-updated.com\" --agent-name test-agent --project-id test-cx-346408 --location-id us-central1 --flexible true --request-body \"{\\\"hello\\\": false}\" --parameters-mapping \"my-param@$.fully.qualified.path.to.field\"\n</code></pre> <p>The above command will give you output similar to the following:</p> <pre><code>$ cxcli webhook update my-webhook --url \"https://my-webhook-updated.com\" --agent-name test-agent --project-id test-cx-346408 --location-id us-central1 --flexible true --request-body \"{\\\"hello\\\": false}\" --parameters-mapping \"my-param@$.fully.qualified.path.to.field\"\nINFO Webhook updated\n</code></pre>"},{"location":"webhooks/update/#useful-links","title":"Useful Links","text":"<p>If you want to learn more about Dialogflow CX webhook update, refer to the official documentation.</p>"}]}